{"version":3,"sources":["assets/Paginator/Paginator.tsx","Components/Users/User.tsx","Components/Users/SearchForm.jsx","Components/Users/Users.tsx","../node_modules/reselect/es/index.js","redux/users-selectors.ts","Components/Users/UsersContainer.tsx"],"names":["Paginator","props","totalPages","totalUsers","pageSize","pages","i","Math","ceil","push","useState","portionNumber","setPortionNumber","portionsCount","portionSize","leftPortion","rightPortion","className","onClick","s","changePortion","filter","p","map","currentPage","e","onPageCurrentChange","key","User","user","unFollowUserThunk","followUserThunk","followingInProgress","to","id","src","photos","small","userPhoto","alt","name","status","followed","disabled","some","SearchForm","onSubmit","handleSubmit","Field","placeholder","component","SearchFormRedux","reduxForm","form","Users","React","memo","arrayUsersFollowed","UsersList","arrayWithSubs","item","showFollowing","setShow","onChange","formData","onSearchChange","searchForm","length","u","defaultEqualityCheck","a","b","areArgumentsShallowlyEqual","equalityCheck","prev","next","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","join","Error","createSelector","memoize","_len","arguments","memoizeOptions","_key","_len2","_key2","recomputations","resultFunc","pop","memoizedResultFunc","apply","undefined","concat","selector","params","resetRecomputations","createSelectorCreator","func","lastArgs","lastResult","getUsersList","state","userPage","getPageSize","getTotalUsers","getCurrentPage","getSearchTerm","searchTerm","getIsFetching","isFetching","getFollowingInProgress","UsersContainerClass","pageNumber","setCurrentPageThunk","text","setSearchTermTextThunk","this","getUsersThunk","Preloader","Component","compose","connect","getUsersThunkCreator","setCurrentPageThunkCreator","setSearchTermTextThunkCreator","unFollowUserThunkCreator","followUserThunkCreator"],"mappings":"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","file":"static/js/3.0e99e45e.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport s from './Paginator.module.css';\r\n\r\ntype PropsType = {\r\n    totalUsers: number,\r\n    pageSize: number,\r\n    portionSize: number,\r\n    currentPage: number,\r\n    onPageCurrentChange: (pageNumber: number) => void\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> = (props) => {\r\n    //считаем сколько страниц\r\n    let totalPages = props.totalUsers / props.pageSize;\r\n    let pages = [];\r\n    for (let i = 1; i <= Math.ceil(totalPages); i++) {\r\n        pages.push(i);\r\n    }\r\n    //\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let portionsCount = Math.ceil(totalPages / props.portionSize);\r\n    let leftPortion = (portionNumber - 1) * props.portionSize + 1;\r\n    let rightPortion = portionNumber * props.portionSize;\r\n\r\n    return (\r\n        <ul className=\"pagination center-align\">\r\n            {portionNumber >= 2 && <li onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }} className={s.changePortion}> {<i className=\"material-icons\">chevron_left</i>}</li>}\r\n            {pages.filter(p => p >= leftPortion && p <= rightPortion)\r\n                .map(p => {\r\n                    return <li className={props.currentPage === p ? 'active' : 'waves-effect'}\r\n                        onClick={(e) => {\r\n                            props.onPageCurrentChange(p)\r\n                        }} key={p}><p>{p}</p></li>\r\n                })}\r\n            {portionsCount > portionNumber && <li onClick={() => {\r\n                setPortionNumber(portionNumber + 1);\r\n            }} className={s.changePortion}>{<i className=\"material-icons\">chevron_right</i>}\r\n            </li>\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Paginator;","import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport userPhoto from './../../assets/images/userPhoto.png'\r\nimport { UserType } from '../../Types/UsersTypes';\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    unFollowUserThunk: (userId: number) => void\r\n    followUserThunk: (userId: number) => void\r\n    followingInProgress: Array<Number>\r\n}\r\n\r\nconst User:React.FC<PropsType> = ({ user, unFollowUserThunk, followUserThunk, followingInProgress }) => {\r\n    return (\r\n        <div className='col xl6 s12 l6 m12'>\r\n            <div className=\"card\">\r\n                <div className=\"card-image waves-effect waves-block waves-light p10\">\r\n                    <NavLink to={'profile/' + user.id}><img className=\"activator center-img\" src={\r\n                        user.photos.small != null ? user.photos.small : userPhoto} alt='' />\r\n                    </NavLink>\r\n                </div>\r\n                <div className=\"card-content\">\r\n                    <span className=\"card-title activator grey-text text-darken-4\">\r\n                        <p className='truncate'>Name : {user.name}</p>\r\n                        <p className='truncate'>Status : {user.status}</p>\r\n                    </span>\r\n                    {\r\n                        user.followed\r\n                            ?\r\n                            <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                onClick={() => {\r\n                                    unFollowUserThunk(user.id)\r\n                                }} className='btn waves-effect waves-light black'>UnFollow</button>\r\n                            :\r\n                            <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                onClick={() => {\r\n                                    followUserThunk(user.id)\r\n                                }} className='btn waves-effect waves-light indigo lighten-5 black-text'>Follow</button>\r\n                    }\r\n                    <button className='btn waves-effect waves-light indigo lighten-5 black-text'>\r\n                        <NavLink to={'/messages/' + user.id} className='black-text'>Send message</NavLink>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport {Field, reduxForm} from 'redux-form';\r\n\r\n\r\n\r\n\r\nconst SearchForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder='Search users' name='searchForm' component='input' />\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const SearchFormRedux = reduxForm({form: 'search'})(SearchForm)\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default SearchForm\r\n","import React, { useState } from 'react';\r\nimport Paginator from \"../../assets/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport { SearchFormRedux } from \"./SearchForm\";\r\nimport {UserType} from \"./../../Types/UsersTypes\";\r\n\r\ntype PropsType = {\r\n    totalUsers: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    onPageCurrentChange: (pageNumber: number) => void,\r\n    followUserThunk: (userId: number) => void,\r\n    unFollowUserThunk: (userId: number) => void,\r\n    followingInProgress: Array<Number>,\r\n    onSearchChange: (textForSearch: string) => void\r\n    UsersList: UserType[],\r\n    searchTerm?: string | null\r\n}\r\n\r\nconst Users:React.FC<PropsType> = React.memo(props => {\r\n    //for react form\r\n\r\n    let onChangedTextForSearch = (formData:{searchForm:string}) => {\r\n        props.onSearchChange(formData.searchForm)\r\n    }\r\n    //searching subs\r\n    let arrayUsersFollowed = props.UsersList;\r\n    const isFollowed = (obj:boolean) => {\r\n        return obj === true;\r\n    }\r\n    const filterByFollowing = (item:{followed:boolean}) => {\r\n        if (isFollowed(item.followed)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    let arrayWithSubs = arrayUsersFollowed.filter(filterByFollowing);\r\n    //end\r\n    let [showFollowing, setShow] = useState(false);\r\n    let showUsersFollowing = () => {\r\n        setShow(!showFollowing)\r\n    };\r\n\r\n    return (\r\n        <div >\r\n            <SearchFormRedux onChange={onChangedTextForSearch} />\r\n            <p className=\"waves-effect waves-light btn-small black\"\r\n                onClick={showUsersFollowing}>\r\n                {!showFollowing ? 'Show Follow' : 'Hide Follow'}\r\n            </p>\r\n            <div className='row'>\r\n                {showFollowing ?\r\n                    arrayWithSubs.length === 0 ? 'No subs' :\r\n                        //вывод подписчиков\r\n                        arrayWithSubs.map(u => <User\r\n                            user={u}\r\n                            unFollowUserThunk={props.unFollowUserThunk}\r\n                            followUserThunk={props.followUserThunk}\r\n                            followingInProgress={props.followingInProgress} key={u.id} />)\r\n                    //вывод обычных пользователей\r\n                    : props.UsersList.map(u => <User\r\n                        user={u}\r\n                        unFollowUserThunk={props.unFollowUserThunk}\r\n                        followUserThunk={props.followUserThunk}\r\n                        followingInProgress={props.followingInProgress} key={u.id} />)\r\n                }\r\n            </div>\r\n            <Paginator totalUsers={props.totalUsers} pageSize={props.pageSize}\r\n                currentPage={props.currentPage}\r\n                onPageCurrentChange={props.onPageCurrentChange}\r\n                portionSize={5}\r\n            />\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Users;","function defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  var length = prev.length;\n  for (var i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function defaultMemoize(func) {\n  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;\n\n  var lastArgs = null;\n  var lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep;\n    }).join(', ');\n    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptions[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var recomputations = 0;\n    var resultFunc = funcs.pop();\n    var dependencies = getDependencies(funcs);\n\n    var memoizedResultFunc = memoize.apply(undefined, [function () {\n      recomputations++;\n      // apply arguments instead of spreading for performance.\n      return resultFunc.apply(null, arguments);\n    }].concat(memoizeOptions));\n\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n    var selector = memoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments));\n      }\n\n      // apply arguments instead of spreading for performance.\n      return memoizedResultFunc.apply(null, params);\n    });\n\n    selector.resultFunc = resultFunc;\n    selector.dependencies = dependencies;\n    selector.recomputations = function () {\n      return recomputations;\n    };\n    selector.resetRecomputations = function () {\n      return recomputations = 0;\n    };\n    return selector;\n  };\n}\n\nexport var createSelector = createSelectorCreator(defaultMemoize);\n\nexport function createStructuredSelector(selectors) {\n  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));\n  }\n  var objectKeys = Object.keys(selectors);\n  return selectorCreator(objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n}","import {createSelector} from \"reselect\";\r\nimport { AppStateType } from \"./store-redux\";\r\n\r\nexport const getUsersList = (state:AppStateType) => {\r\n    return state.userPage.UsersList;\r\n}\r\n//reselect library, simple\r\nexport const getUsersListSubSuperSelector = createSelector(getUsersList,(UsersList) => {\r\n    return UsersList.filter(u => true)\r\n})\r\nexport const getPageSize = (state:AppStateType) => {\r\n    return state.userPage.pageSize;\r\n}\r\nexport const getTotalUsers = (state:AppStateType) => {\r\n    return state.userPage.totalUsers;\r\n}\r\nexport const getCurrentPage = (state:AppStateType) => {\r\n    return state.userPage.currentPage;\r\n}\r\nexport const getSearchTerm = (state:AppStateType) => {\r\n    return state.userPage.searchTerm;\r\n}\r\nexport const getIsFetching = (state:AppStateType) => {\r\n    return state.userPage.isFetching;\r\n}\r\nexport const getFollowingInProgress = (state:AppStateType) => {\r\n    return state.userPage.followingInProgress;\r\n}\r\n\r\n","import { connect } from \"react-redux\";\r\nimport Users from \"./Users\";\r\nimport {\r\n\tfollowUserThunkCreator,\r\n\tgetUsersThunkCreator,\r\n\tsetCurrentPageThunkCreator,\r\n\tsetSearchTermTextThunkCreator,\r\n\tunFollowUserThunkCreator\r\n} from \"../../redux/UsersPage-Reducer\";\r\nimport React from \"react\";\r\nimport Preloader from \"../../assets/preloader/Preloader\";\r\nimport { compose } from \"redux\";\r\nimport {\r\n\tgetCurrentPage,\r\n\tgetFollowingInProgress,\r\n\tgetIsFetching,\r\n\tgetPageSize,\r\n\tgetSearchTerm,\r\n\tgetTotalUsers,\r\n\tgetUsersList,\r\n} from \"../../redux/users-selectors\";\r\nimport { UserType } from \"../../Types/UsersTypes\";\r\nimport { AppStateType } from \"../../redux/store-redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n\tisFetching: boolean,\r\n\tsearchTerm: string | null,\r\n\ttotalUsers: number,\r\n    pageSize: number,\r\n\tcurrentPage: number,\r\n\tUsersList: UserType[],\r\n\tfollowingInProgress: Array<Number>\r\n}\r\ntype MapDispatchPropsType = {\r\n\tfollowUserThunk: (userId: number) => void,\r\n    unFollowUserThunk: (userId: number) => void,\r\n\tgetUsersThunk: (pageSize: number, currentPage: number) => void,\r\n\tsetCurrentPageThunk: (pageSize: number, pageNumber: number) => void,\r\n\tsetSearchTermTextThunk: (pageSize: number, text: string) => void\r\n}\r\n//делим типы пропсов, если же мы получаем напрямую через передачу другой компоненты\r\n//то делаем тип, то есть три типа: MapState, MapDispatch, OwnProps(этот если через компоненту)\r\ntype PropsTypes = MapStatePropsType & MapDispatchPropsType //& OwnProps\r\n\r\nclass UsersContainerClass extends React.Component<PropsTypes> {\r\n\tcomponentDidMount() {\r\n\t\tthis.props.getUsersThunk(this.props.pageSize, this.props.currentPage)\r\n\t}\r\n\r\n\t//новый запрос, на изменение выбранной страницы\r\n\tonPageCurrentChange = (pageNumber: number) => {\r\n\t\tthis.props.setCurrentPageThunk(this.props.pageSize, pageNumber)\r\n\t}\r\n\t//поиск по пользователям метод\r\n\tonSearchChange = (text: string) => {\r\n\t\tthis.props.setSearchTermTextThunk(this.props.pageSize, text)\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (<>\r\n\t\t\t{this.props.isFetching ? < Preloader /> : null}\r\n\t\t\t<Users totalUsers={this.props.totalUsers}\r\n\t\t\t\tpageSize={this.props.pageSize}\r\n\t\t\t\tsearchTerm={this.props.searchTerm}\r\n\t\t\t\tonSearchChange={this.onSearchChange}\r\n\t\t\t\tcurrentPage={this.props.currentPage}\r\n\t\t\t\tonPageCurrentChange={this.onPageCurrentChange}\r\n\t\t\t\tUsersList={this.props.UsersList}\r\n\t\t\t\tfollowingInProgress={this.props.followingInProgress}\r\n\t\t\t\tunFollowUserThunk={this.props.unFollowUserThunk}\r\n\t\t\t\tfollowUserThunk={this.props.followUserThunk} />\r\n\t\t</>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n//указываем наш глобальный тип, а также тип mapstate\r\nlet mapStateToProps = (state: AppStateType):MapStatePropsType => {\r\n\treturn {\r\n\t\tUsersList: getUsersList(state),\r\n\t\tpageSize: getPageSize(state),\r\n\t\ttotalUsers: getTotalUsers(state),\r\n\t\tcurrentPage: getCurrentPage(state),\r\n\t\tsearchTerm: getSearchTerm(state),\r\n\t\tisFetching: getIsFetching(state),\r\n\t\tfollowingInProgress: getFollowingInProgress(state)\r\n\t}\r\n}\r\n//типы также указываем где connect ctrl click для просмотра подробно, 4 параметра, если \r\n//в типах не указана подробная информация(в случае санок) могут возникнуть ошибки\r\n//обязательно указывать все параметры\r\nexport default compose(\r\n\t//тут\r\nconnect<MapStatePropsType, MapDispatchPropsType,null,AppStateType>\r\n\t//generic\r\n(mapStateToProps, {\r\n\t\tgetUsersThunk: getUsersThunkCreator,\r\n\t\tsetCurrentPageThunk: setCurrentPageThunkCreator,\r\n\t\tsetSearchTermTextThunk: setSearchTermTextThunkCreator,\r\n\t\tunFollowUserThunk: unFollowUserThunkCreator,\r\n\t\tfollowUserThunk: followUserThunkCreator\r\n\t})\r\n)(UsersContainerClass)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//old method mdtp\r\n// let mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         follow: (userId) => {\r\n//             dispatch(followAC(userId))\r\n//         },\r\n//         unFollow: (userId) => {\r\n//             dispatch(unFollowAC(userId))\r\n//         },\r\n//         setUsers: (UsersList) => {\r\n//             dispatch(setUsersAC(UsersList))\r\n//         },\r\n//         setCurrentPage: (currentPage) => {\r\n//             dispatch(setCurrentPageAC(currentPage))\r\n//         },\r\n//         setUsersTotal: (totalUsers) => {\r\n//             dispatch(setUsersTotalCount(totalUsers))\r\n//         },\r\n//         setSearchTermText: (text) => {\r\n//             dispatch(setSearchTermAC(text))\r\n//         },\r\n//         toggleIsFetching: (isFetching) => {\r\n//             dispatch(toggleIsFetchingAC(isFetching))\r\n//         }\r\n//     }\r\n// }\r\n\r\n//none compose\r\n// const UsersContainer = connect(mapStateToProps,\r\n//     {\r\n//         follow: followAC,\r\n//         unFollow: unFollowAC,\r\n//         toggleFollowingInProgress: toggleFollowingInProgressAC,\r\n//         getUsersThunk: getUsersThunkCreator,\r\n//         setCurrentPageThunk: setCurrentPageThunkCreator,\r\n//         setSearchTermTextThunk: setSearchTermTextThunkCreator,\r\n//         unFollowUserThunk: unFollowUserThunkCreator,\r\n//         followUserThunk: followUserThunkCreator\r\n//     }\r\n// )(UsersContainerClass);\r\n// export default UsersContainer;\r\n"],"sourceRoot":""}