{"version":3,"sources":["Api/Api.js","redux/UsersPage-Reducer.js","assets/preloader/preloader.svg","assets/preloader/preloader.module.css","Components/Profile/Profile.module.css","assets/FormControl/FormsControls.module.css","Components/UserMessage/UserMessage.jsx","assets/FormControl/FormsControls.jsx","Components/utils/validators/validators.js","Components/UserMessage/Info.jsx","redux/infoPage-Reducer.js","Components/UserMessage/InfoContainer.jsx","Components/Profile/ProfileStatusWithHooks.jsx","Components/Profile/Profile.jsx","redux/ProfilePage-Reducer.js","Components/Profile/ProfileContainer.jsx","Components/Header/Header.jsx","redux/Auth-Reducer.js","Components/Header/HeaderContainer.jsx","Components/Login/Login.jsx","Components/Login/LoginContainer.jsx","redux/App-Reducer.js","App.js","serviceWorker.js","redux/store-redux.js","index.js","Components/UserMessage/UserMessage.module.css","assets/preloader/Preloader.jsx","Components/Header/Header.module.css"],"names":["instance","axios","withCredentials","baseURL","headers","UsersAPI","getUsers","pageSize","pageNumber","get","then","response","data","getUsersTerm","text","ProfileAPI","getProfile","userId","getStatus","updateStatus","newStatus","put","status","FollowAPI","followUser","id","post","unfollowUser","delete","meAPI","me","login","email","password","rememberMe","logout","initialState","UsersList","totalUsers","currentPage","searchTerm","isFetching","followingInProgress","followAC","type","unFollowAC","setUsersAC","setUsersTotalCount","setSearchTermAC","toggleIsFetchingAC","toggleFollowingInProgressAC","getUsersThunkCreator","dispatch","a","async","items","totalCount","setCurrentPageThunkCreator","setSearchTermTextThunkCreator","followUnfollowFlow","methoApi","action","unFollowUserThunkCreator","followUserThunkCreator","UsersPageReducer","state","map","u","followed","filter","module","exports","UserMessage","props","className","s","contain_message","left__contain","src","img","alt","userImg","right__contain","name","message","InputMessage","input","meta","activeError","touched","error","FormControl","InputAuth","required","value","Info","Users","key","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","validate","component","main__block","formData","NewAddMessage","userTextMessage","infoPageReducer","pushedObj","InfoContainer","connect","infoPage","ProfileStatusWithHooks","React","memo","useState","editMode","setEditMode","setStatus","activateEditMode","deactivateEditMode","updateStatusUserThunk","onChangeTextStatus","e","currentTarget","useEffect","urlMatchParams","onChange","autoFocus","onBlur","onDoubleClick","Profile","profile","profileContain","photos","small","aboutMe","fullName","Preloader","setUserProfileAC","setStatusUserAC","profilePageReducer","ProfileContainer","this","match","params","getProfileThunk","setStatusUserThunk","path","to","Component","compose","profilePage","Auth","setUser","resultCode","alert","withRouter","Header","header","isAuth","loginBlock","onClick","logoutThunk","setAuthUserAC","authMeThunkCreator","authReducer","HeaderContainer","ReduxLoginForm","someError","Login","loginThunk","href","target","rel","LoginContainer","messageError","messages","length","stopSubmit","_error","initialized","UsersContainer","lazy","App","initiliazedThunk","render","fallback","exact","app","Boolean","window","location","hostname","reducers","combineReducers","userPage","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","preloadImg","preloader"],"mappings":"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","file":"static/js/main.34867a97.chunk.js","sourcesContent":["import * as axios from \"axios\";\r\n//создаем образец, чтобы не дублировать код\r\nlet instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"854c2128-c8b3-4384-8ac5-b69b15ea1eff\"\r\n    }\r\n})\r\n//группировка методов\r\nexport const UsersAPI = {\r\n    getUsers(pageSize,pageNumber){\r\n        return instance.get(`users?count=${pageSize}&page=${pageNumber}`)\r\n            .then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    getUsersTerm(pageSize,text){\r\n        return instance.get(`users?count=${pageSize}&page=1&term=${text}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}\r\n\r\nexport const ProfileAPI = {\r\n    getProfile(userId){\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId){\r\n        return instance.get(`/profile/status/` + userId);\r\n    },\r\n    updateStatus(newStatus){\r\n        return instance.put(`/profile/status`,{status: newStatus})\r\n    }\r\n\r\n}\r\n\r\nexport const FollowAPI = {\r\n    followUser(id){\r\n        return instance.post(`follow/${id}`,{})\r\n    },\r\n    unfollowUser(id){\r\n        return instance.delete(`follow/${id}`, {})\r\n    },\r\n}\r\n\r\nexport const meAPI = {\r\n    me(){\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email,password,rememberMe = false){\r\n        return instance.post(`auth/login`,{email,password,rememberMe})\r\n    },\r\n    logout(){\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}","import {FollowAPI, UsersAPI} from \"../Api/Api\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_USERS_TOTAL_COUNT = 'SET_USERS_TOTAL_COUNT';\r\nconst SET_SEARCH_TERM = 'SET_SEARCH_TERM';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_FOLLOWING_PROGRESS = 'TOGGLE_FOLLOWING_PROGRESS'\r\n\r\n\r\nlet initialState = {\r\n    UsersList: [],\r\n    pageSize: 15,\r\n    totalUsers: 0,\r\n    currentPage: 1,\r\n    searchTerm: '',\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\nconst UsersPageReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                UsersList: state.UsersList.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                UsersList: state.UsersList.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                UsersList: action.UsersList,\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case SET_USERS_TOTAL_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsers: action.totalUsers\r\n            }\r\n        case SET_SEARCH_TERM:\r\n            return {\r\n                ...state,\r\n                searchTerm: action.text\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.userId]\r\n                    :\r\n                    state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const followAC = (userId) => {\r\n    return {\r\n        type: FOLLOW, userId\r\n    }\r\n}\r\nexport const unFollowAC = (userId) => {\r\n    return {\r\n        type: UNFOLLOW, userId\r\n    }\r\n}\r\nexport const setUsersAC = (UsersList) => {\r\n    return {\r\n        type: SET_USERS, UsersList\r\n    }\r\n}\r\nexport const setCurrentPageAC = (currentPage) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE, currentPage\r\n    }\r\n}\r\nexport const setUsersTotalCount = (totalUsers) => {\r\n    return {\r\n        type: SET_USERS_TOTAL_COUNT, totalUsers\r\n    }\r\n}\r\nexport const setSearchTermAC = (text) => {\r\n    return {\r\n        type: SET_SEARCH_TERM, text\r\n    }\r\n}\r\nexport const toggleIsFetchingAC = (isFetching) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING, isFetching\r\n    }\r\n}\r\nexport const toggleFollowingInProgressAC = (isFetching, userId) => {\r\n    return {\r\n        type: TOGGLE_FOLLOWING_PROGRESS,\r\n        isFetching, userId\r\n    }\r\n}\r\n\r\nexport const getUsersThunkCreator = (pageSize, currentPage) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetchingAC(true));\r\n        let response = await UsersAPI.getUsers(pageSize, currentPage)\r\n        dispatch(toggleIsFetchingAC(false));\r\n        dispatch(setUsersAC(response.items));\r\n        dispatch(setUsersTotalCount(response.totalCount));\r\n    }\r\n}\r\n\r\nexport const setCurrentPageThunkCreator = (pageSize, pageNumber) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetchingAC(true));\r\n        dispatch(setCurrentPageAC(pageNumber));\r\n        let response = await UsersAPI.getUsers(pageSize, pageNumber)\r\n        dispatch(toggleIsFetchingAC(false));\r\n        dispatch(setUsersAC(response.items));\r\n        dispatch(setUsersTotalCount(response.totalCount));\r\n    }\r\n}\r\n\r\nexport const setSearchTermTextThunkCreator = (pageSize, text) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetchingAC(true));\r\n        dispatch(setSearchTermAC(text));\r\n        if(!text){\r\n            text = ' ';\r\n        }\r\n        let response = await UsersAPI.getUsersTerm(pageSize, text)\r\n        dispatch(toggleIsFetchingAC(false));\r\n        dispatch(setUsersAC(response.items));\r\n        dispatch(setUsersTotalCount(response.totalCount));\r\n    }\r\n}\r\n\r\n\r\nconst followUnfollowFlow = async (dispatch, userId, methoApi, action) => {\r\n    dispatch(toggleFollowingInProgressAC(true, userId))\r\n    await methoApi(userId)\r\n    dispatch(action(userId));\r\n    dispatch(toggleFollowingInProgressAC(false, userId));\r\n}\r\n\r\n\r\nexport const unFollowUserThunkCreator = (userId) => (dispatch) => {\r\n    return followUnfollowFlow(dispatch, userId, FollowAPI.unfollowUser, unFollowAC)\r\n}\r\n\r\n\r\nexport const followUserThunkCreator = (userId) => (dispatch) => {\r\n    return followUnfollowFlow(dispatch, userId, FollowAPI.followUser, followAC)\r\n}\r\n\r\n\r\nexport default UsersPageReducer;","module.exports = __webpack_public_path__ + \"static/media/preloader.03527c20.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"preloader_preloader__2qVkc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileContain\":\"Profile_profileContain__S9NYC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FormControl\":\"FormsControls_FormControl__3MfD4\",\"error\":\"FormsControls_error__22-w1\",\"someError\":\"FormsControls_someError__2DiAh\"};","import React from 'react';\r\nimport s from './UserMessage.module.css';\r\n\r\nconst UserMessage = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={s.contain_message}>\r\n                <div className={s.left__contain}>\r\n                    <img src={props.img} alt=\"\" className={s.userImg}/>\r\n                </div>\r\n                <div className={s.right__contain}>\r\n                    <div> {props.name}</div>\r\n                    <div>{props.message}</div>\r\n                </div>\r\n            </div>\r\n            <br/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserMessage;","import React from \"react\";\r\nimport s from './FormsControls.module.css';\r\n\r\nexport const InputMessage = ({input, meta, ...props}) => {\r\n    let activeError = meta.touched && meta.error ? s.error : ' ';\r\n    return (\r\n        <div className={s.FormControl}>\r\n            <div className={activeError}>\r\n                <input {...input} {...props} /><br/>\r\n                {meta.touched && meta.error && <span>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport const InputAuth = ({input, meta, ...props}) => {\r\n    let activeError = meta.touched && meta.error ? s.error : ' ';\r\n    return (\r\n        <div className={s.FormControl}>\r\n            <div className={activeError}>\r\n                <input {...input} {...props} /><br/>\r\n                {meta.touched && meta.error && <span>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport const InputSearch = ({input, meta, ...props}) => {\r\n    let activeError = meta.touched && meta.error ? s.error : ' ';\r\n    return (\r\n        <div className={s.FormControl}>\r\n            <div className={activeError}>\r\n                <input {...input} {...props} /><br/>\r\n                {meta.touched && meta.error && <span>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","\r\nexport const required = (value) => {\r\n    if(value) return undefined;\r\n    return 'Some errors';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if(value.length > maxLength) return 'Maximum number of characters ' + maxLength;\r\n    return undefined\r\n}\r\n","import React from 'react';\r\nimport s from './UserMessage.module.css';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport UserMessage from \"./UserMessage\";\r\nimport {InputMessage} from \"../../assets/FormControl/FormsControls\";\r\nimport {required} from \"../utils/validators/validators\";\r\n\r\n\r\nconst Info = (props) => {\r\n    //map getting users\r\n    let getUsers = props.Users.map(u =>\r\n        <UserMessage message={u.message} key={u.id} id={u.id} name={u.name} img={u.img}/>);\r\n    //onSubmit for redux-form\r\n    let addMessage = (formData) => {\r\n        props.NewAddMessage(formData.userTextMessage);\r\n    }\r\n    //creating form\r\n    const AddMessageForm = (props) => {\r\n        return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                <Field placeholder='write a message'\r\n                       validate={[required]} name='userTextMessage' component={InputMessage}/>\r\n                <button>ok</button>\r\n            </form>\r\n        )\r\n    }\r\n    //create redux-form\r\n    const AddMessageReduxForm = reduxForm({form: 'AddMessage'})(AddMessageForm);\r\n    return (\r\n        <div>\r\n            <div className={s.main__block}>\r\n                {getUsers}\r\n                <AddMessageReduxForm onSubmit={addMessage}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Info;","const ADD_MESSAGE = 'ADD_MESSAGE';\r\n\r\nlet initialState = {\r\n    Users: [\r\n        {\r\n            id: 1,\r\n            message: 'Hi',\r\n            name: 'Chikibamboni',\r\n            img: 'https://galaxy.esn.org/sites/default/files/cards/font-awesome_4-7-0_user_1024_0_00aeef_none.png'\r\n        }\r\n    ]\r\n}\r\n\r\nconst infoPageReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            let pushedObj = {\r\n                id: 4, message: action.userTextMessage, name: 'Me'\r\n                , img: 'https://www.clipartmax.com/png/middle/97-978328_avatar-icon-free-fa-user-circle-o.png'\r\n            }\r\n            return {\r\n                ...state,\r\n                Users: [...state.Users, pushedObj]\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const addMessageActionCreator = (userTextMessage) => {\r\n    return {\r\n        type: ADD_MESSAGE,\r\n        userTextMessage\r\n    }\r\n}\r\nexport default infoPageReducer;","import Info from \"./Info\";\r\nimport {addMessageActionCreator} from \"../../redux/infoPage-Reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        Users: state.infoPage.Users\r\n    }\r\n}\r\nconst InfoContainer = connect(mapStateToProps, {\r\n    NewAddMessage: addMessageActionCreator\r\n})(Info);\r\nexport default InfoContainer;","import React, {useEffect, useState} from 'react';\r\n\r\nconst ProfileStatusWithHooks = React.memo(props => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatusUserThunk(props.id, status)\r\n    }\r\n    let onChangeTextStatus = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n    //сохранение значения поля статуса при переходах.\r\n    //вместо componentDidUpdate\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[props.status]);\r\n    //строка , [props.status], означает Перезапускать эффект только если props.status поменялся\r\n\r\n    const withEditStatus = () => {\r\n        //проверка страницы, если страница пользователя, то можно редактировать.\r\n        if (props.urlMatchParams == props.id) {\r\n            if (!editMode) {\r\n                return <span onDoubleClick={activateEditMode}>Status: {props.status}</span>\r\n            } else {\r\n                return <input onChange={onChangeTextStatus} autoFocus={true}\r\n                              onBlur={deactivateEditMode} value={status}/>\r\n            }\r\n        } else {\r\n            //просто вывод\r\n            return <div>\r\n                {!props.status ? <div>_____</div> : 'Status:' + props.status}\r\n            </div>\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            {withEditStatus()}\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport default ProfileStatusWithHooks","import React from 'react';\r\nimport Preloader from \"../../assets/preloader/Preloader\";\r\nimport s from './Profile.module.css';\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst Profile = React.memo(props => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.profileContain}>\r\n            <img src={\r\n                props.profile.photos.small === null ? 'http://www.pngmart.com/files/10/User-Account-Person-PNG-File.png'\r\n                    : props.profile.photos.small\r\n            } alt=''/><br/>\r\n            <span>AboutMe: {props.profile.aboutMe}<br/></span>\r\n            <span>FullName: {props.profile.fullName}<br/></span>\r\n            <ProfileStatusWithHooks status={props.status}\r\n                           updateStatusUserThunk={props.updateStatusUserThunk}\r\n                           id={props.id}\r\n                           urlMatchParams={props.urlMatchParams}\r\n            />\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Profile\r\n","import {meAPI, ProfileAPI} from \"../Api/Api\";\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\n\r\n\r\nlet initialState = {\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\nconst profilePageReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case SET_STATUS:\r\n            return{\r\n                ...state,\r\n                status: action.status\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUserProfileAC = (profile) => {\r\n    return {\r\n        type: SET_USER_PROFILE, profile\r\n    }\r\n}\r\nexport const setStatusUserAC = (status) => {\r\n    return{\r\n        type: SET_STATUS, status\r\n    }\r\n}\r\nexport const getProfileThunkCreator = (userId) => {\r\n    return (dispatch) => {\r\n        if(!userId){\r\n            //none\r\n        }else {\r\n            ProfileAPI.getProfile(userId)\r\n                .then(response => {\r\n                    dispatch(setUserProfileAC(response.data));\r\n                })\r\n        }\r\n    }\r\n}\r\n//получение статуса пользователя\r\nexport const setStatusUserThunkCreator = (userId) => {\r\n    return (dispatch) => {\r\n        if(!userId){\r\n            //none\r\n        }else {\r\n            ProfileAPI.getStatus(userId).then(response => {\r\n                dispatch(setStatusUserAC(response.data))\r\n            })\r\n        }\r\n    }\r\n}\r\nexport const updateStatusUserThunkCreator = (userId,newStatus) => {\r\n    return (dispatch) => {\r\n        //проверка на изменение входящего текста\r\n        ProfileAPI.getStatus(userId).then(response => {\r\n            dispatch(setStatusUserAC(response.data))\r\n            if(!newStatus){\r\n                alert('field empty')\r\n            }else {\r\n                if (response.data !== newStatus) {\r\n                    ProfileAPI.updateStatus(newStatus).then(response => {\r\n                        if (response.data.resultCode === 0) {\r\n                            dispatch(setStatusUserAC(newStatus))\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        })\r\n        //end\r\n    }\r\n}\r\n\r\n\r\nexport default profilePageReducer;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getProfileThunkCreator,\r\n    setStatusUserThunkCreator,\r\n    setUserProfileAC, updateStatusUserThunkCreator\r\n} from \"../../redux/ProfilePage-Reducer\";\r\nimport {Redirect, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirectHoc} from \"../HOC/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n    componentDidMount() {\r\n        //Установка профиля пользователя\r\n        //проверяем из url пользователя по параметрам\r\n        let userId = this.props.match.params.userId;\r\n        //устанавливаем пользователя и получаем массив\r\n        this.props.getProfileThunk(userId);\r\n        //установка статуса\r\n        this.props.setStatusUserThunk(userId);\r\n    }\r\n    render() {\r\n        //синхронизация профиля\r\n        //добавление id к url после авторизации\r\n        if (!this.props.match.params.userId) {\r\n            if (!this.props.id) {\r\n                return <Redirect to={'/login'}/>\r\n            } else {\r\n                let path = `/profile/${this.props.id}`;\r\n                this.props.getProfileThunk(this.props.id);\r\n                this.props.setStatusUserThunk(this.props.id);\r\n                return <Redirect to={path}/>\r\n            }\r\n        }\r\n        return (\r\n            <div>\r\n                <Profile profile={this.props.profile} status={this.props.status}\r\n                         updateStatusUserThunk={this.props.updateStatusUserThunk}\r\n                         id={this.props.id}\r\n                         //math params для изменения статуса\r\n                        urlMatchParams={this.props.match.params.userId}\r\n\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        id: state.Auth.id,\r\n        status: state.profilePage.status\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,\r\n        {\r\n            setUser: setUserProfileAC,\r\n            getProfileThunk: getProfileThunkCreator,\r\n            setStatusUserThunk: setStatusUserThunkCreator,\r\n            updateStatusUserThunk: updateStatusUserThunkCreator\r\n        }),\r\n    //withAuthRedirectHoc,\r\n    withRouter\r\n)(ProfileContainer)\r\n","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport './../../App.css';\r\nimport s from './Header.module.css';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div className={s.header}>\r\n            {props.isAuth ?\r\n                <div className={s.loginBlock}>\r\n                    {props.login}\r\n                    <button onClick={props.logoutThunk}>Log out</button>\r\n            </div> :\r\n                <NavLink to='/login/' className={s.loginBlock}> Login </NavLink>\r\n            }\r\n            <NavLink to='/MyChat'> MyChat </NavLink><br/>\r\n            <NavLink to='/Users'> Users </NavLink><br/>\r\n            <NavLink to='/profile/'> Profile </NavLink><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import {meAPI} from \"../Api/Api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_AUTH_USER = 'SET_AUTH_USER';\r\n\r\nlet initialState = {\r\n    id: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_AUTH_USER:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            }\r\n         default :\r\n             return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserAC = (id,login,email,isAuth) => {\r\n    return {\r\n        type: SET_AUTH_USER,\r\n        data: {id,login,email,isAuth}\r\n    }\r\n}\r\nexport const authMeThunkCreator = () => (dispatch) => {\r\n    return meAPI.me().then(response => {\r\n        if (response.data.resultCode === 0) {\r\n            let {id, login, email} = response.data.data;\r\n            dispatch(setAuthUserAC(id, login, email,true))\r\n        }\r\n    })\r\n}\r\n\r\nexport const loginThunkCreator = (email,password,rememberMe) => (dispatch) => {\r\n    meAPI.login(email,password,rememberMe).then(response => {\r\n        if(response.data.resultCode === 0){\r\n            dispatch(authMeThunkCreator())\r\n        }else{\r\n            let messageError = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n            dispatch(stopSubmit(\"login\",{_error: messageError}))\r\n        }\r\n\r\n    })\r\n}\r\nexport const logoutThunkCreator = () => (dispatch) => {\r\n    meAPI.logout().then(response => {\r\n        if(response.data.resultCode === 0){\r\n            dispatch(setAuthUserAC(null,null,null,false))\r\n        }\r\n    })\r\n}\r\nexport default authReducer;","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logoutThunkCreator} from \"../../redux/Auth-Reducer\";\r\n\r\n\r\nclass HeaderContainer extends React.Component {\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.Auth.isAuth,\r\n        login: state.Auth.login,\r\n        id: state.Auth.id\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    logoutThunk: logoutThunkCreator\r\n})(HeaderContainer);","import React from 'react';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport {InputAuth} from \"../../assets/FormControl/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../utils/validators/validators\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport s from './../../assets/FormControl/FormsControls.module.css';\r\n\r\n//testing validate maxLength\r\n//let maxLength5 = maxLengthCreator(5);\r\n//create local form\r\nconst LoginForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder='Email' validate={[required]} name='email' component={InputAuth}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder='Password' validate={[required]}\r\n                       name='password' type='Password' component={InputAuth}/>\r\n            </div>\r\n            <div>\r\n                <Field name='rememberMe' component=\"input\" type=\"Checkbox\"/>Remember Me\r\n            </div>\r\n            {props.error &&\r\n            <div className={s.someError}>\r\n                {props.error}\r\n            </div>\r\n            }\r\n            <button>Login</button>\r\n        </form>\r\n    )\r\n}\r\n//create redux-form\r\nconst ReduxLoginForm = reduxForm({form: 'login'})(LoginForm)\r\nconst Login = (props) => {\r\n    let onSubmit = (formData) => {\r\n        //авторизация\r\n        props.loginThunk(formData.email,formData.password,formData.rememberMe)\r\n    }\r\n    if(props.isAuth){\r\n       return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login page</h1>\r\n            <ReduxLoginForm onSubmit={onSubmit}/>\r\n            <h3>If authorization does not work, do it\r\n                <a href=\"https://social-network.samuraijs.com/login\" target=\"_blank\" rel=\"noopener noreferrer\"> here</a>\r\n            </h3>\r\n            <h3>If you do not have an account, you can register\r\n                <a href=\"https://social-network.samuraijs.com/signUp\" target=\"_blank\"\r\n                   rel=\"noopener noreferrer\"> here</a>\r\n            </h3>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import Login from \"./Login\";\r\nimport {loginThunkCreator} from \"../../redux/Auth-Reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.Auth.isAuth\r\n    }\r\n}\r\n\r\nexport const LoginContainer = connect(mapStateToProps, {\r\n    loginThunk: loginThunkCreator\r\n})(Login)\r\n\r\n","import {authMeThunkCreator} from \"./Auth-Reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n}\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccessAC = () => {\r\n    return{\r\n        type: INITIALIZED_SUCCESS\r\n    }\r\n}\r\n\r\nexport const initiliazedThunkCreator = () => (dispatch) => {\r\n    let promise = dispatch(authMeThunkCreator());\r\n    promise.then(() => {\r\n        dispatch(initializedSuccessAC());\r\n    })\r\n\r\n}\r\n","import React, {Suspense} from 'react';\r\nimport './App.css';\r\nimport InfoContainer from \"./Components/UserMessage/InfoContainer\";\r\nimport {Route} from \"react-router\";\r\nimport ProfileContainer from \"./Components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./Components/Header/HeaderContainer\";\r\nimport {LoginContainer} from \"./Components/Login/LoginContainer\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {initiliazedThunkCreator} from \"./redux/App-Reducer\";\r\nimport Preloader from \"./assets/preloader/Preloader\";\r\n\r\n//import UsersContainer from \"./Components/Users/UsersContainer\";\r\nconst UsersContainer = React.lazy(() => import('./Components/Users/UsersContainer'));\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.props.initiliazedThunk();\r\n    }\r\n\r\n    render() {\r\n        if(!this.props.initialized){\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <div className=\"App\">\r\n                <HeaderContainer/>\r\n                <Route\r\n                    path='/MyChat'\r\n                    render={() => <InfoContainer/>}/>\r\n                <Route\r\n                    path='/Users'\r\n                    render={() => {\r\n                        return  <Suspense fallback={<Preloader/>}>\r\n                            <UsersContainer/>\r\n                        </Suspense>\r\n                    }\r\n                    }/>\r\n                <Route exact path='/profile/:userId?' render={() => <ProfileContainer/>}/>\r\n                <Route path='/Login' render={() => <LoginContainer/>}/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nlet mapStateToProps = (state) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,{\r\n        initiliazedThunk:initiliazedThunkCreator\r\n    }),\r\n    withRouter\r\n)(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport infoPageReducer from './infoPage-Reducer';\r\nimport UsersPageReducer from \"./UsersPage-Reducer\";\r\nimport profilePageReducer from \"./ProfilePage-Reducer\";\r\nimport authReducer from \"./Auth-Reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport {appReducer} from \"./App-Reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    infoPage: infoPageReducer,\r\n    userPage: UsersPageReducer,\r\n    profilePage: profilePageReducer,\r\n    Auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\n//extension\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers,composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n// let store = createStore(reducers,applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from \"./redux/store-redux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n<BrowserRouter >\r\n<Provider\r\nstore = {store} >\r\n    <App />\r\n    </Provider>\r\n    </BrowserRouter>\r\n    , document.getElementById('root')\r\n)\r\n;\r\n\r\n//Убрали наш render() так как connect решает эту проблему сам\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main__block\":\"UserMessage_main__block__1CcU_\",\"userImg\":\"UserMessage_userImg__3KZrh\",\"contain_message\":\"UserMessage_contain_message__ZncI2\",\"right__contain\":\"UserMessage_right__contain__3AVU1\"};","import React from 'react';\r\nimport preloadImg from './preloader.svg'\r\nimport s from './preloader.module.css';\r\n\r\nlet Preloader = (props) => {\r\n    return (\r\n        <div>\r\n            <img src={preloadImg} className={s.preloader} alt=''/>\r\n        </div>\r\n    )\r\n}\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBlock\":\"Header_loginBlock__1_xZL\",\"header\":\"Header_header__2oa4e\",\"active\":\"Header_active__1VMX7\"};"],"sourceRoot":""}