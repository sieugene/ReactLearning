{"version":3,"sources":["redux/UsersPage-Reducer.ts","assets/preloader/preloader.svg","assets/images/post2.jpg","assets/images/post3.jpg","Components/GlobalErrors/GlobalErrors.module.css","Components/Dialogs/Dialogs.module.css","assets/preloader/Preloader.jsx","assets/FormControl/FormsControls.tsx","Components/Profile/ProfileDataForm.tsx","Components/Profile/ProfileStatusWithHooks.tsx","Components/Profile/ProfileData.tsx","Components/Profile/Profile.tsx","redux/ProfilePage-Reducer.ts","Components/Profile/ProfileContainer.tsx","Components/Sidebar/SIdebar.tsx","Components/Header/DropDownNavbar.tsx","Components/Header/Header.tsx","redux/Auth-Reducer.ts","redux/App-Reducer.ts","Components/Header/HeaderContainer.tsx","Components/Home/Home.tsx","Components/utils/validators/validators.js","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","Components/Login/LoginContainer.tsx","Components/Dialogs/Dialog.tsx","Components/Dialogs/Dialogs.tsx","redux/Dialogs-Reducer.ts","Components/Dialogs/DialogsContainer.tsx","Components/Dialogs/MessageForm.js","Components/Dialogs/Messages.tsx","Components/Dialogs/MessagesContainer.tsx","Components/GlobalErrors/GlobalErrors.tsx","App.jsx","serviceWorker.js","redux/store-redux.ts","index.js","Components/Profile/Profile.module.css","assets/FormControl/FormsControls.module.css","Components/Sidebar/Sidebar.module.css","assets/images/userPhoto.png","Components/Header/Header.module.css","Api/Api.ts","assets/preloader/preloader.module.css"],"names":["initialState","UsersList","pageSize","totalUsers","currentPage","searchTerm","isFetching","followingInProgress","followAC","userId","type","unFollowAC","setUsersAC","setUsersTotalCount","setSearchTermAC","text","toggleIsFetchingAC","toggleFollowingInProgressAC","getUsersThunkCreator","dispatch","a","UsersAPI","getUsers","response","items","totalCount","setCurrentPageThunkCreator","pageNumber","setSearchTermTextThunkCreator","getUsersTerm","followUnfollowFlow","methoApi","action","unFollowUserThunkCreator","FollowAPI","unfollowUser","followUserThunkCreator","followUser","UsersPageReducer","state","map","u","id","followed","filter","module","exports","Preloader","props","className","s","preloadContain","src","preloadImg","preloader","alt","InputMessage","input","meta","activeError","touched","error","FormControl","InputAuth","Contact","contactTitle","contactBody","href","target","rel","Field","placeholder","name","component","ReduxEditProfile","reduxForm","form","infoProfile","onSubmit","handleSubmit","someError","Object","keys","profile","contacts","key","ProfileStatusWithHooks","React","memo","useState","editMode","setEditMode","status","setStatus","activateEditMode","deactivateEditMode","updateStatusUserThunk","onChangeTextStatus","e","currentTarget","value","useEffect","Number","urlMatchParams","onChange","autoFocus","onBlur","onDoubleClick","data-tooltip","console","log","ProfileData","editButton","onClick","setEditProfile","aboutMe","fullName","lookingForAJob","lookingForAJobDescription","Profile","editProfile","profileContain","loading","avatarBlock","photos","small","large","userPhoto","files","length","uploadNewPhotoThunk","htmlFor","uploadPhoto","initialValues","formData","updateProfileUserThunk","setStatusUserAC","uploadNewPhotoAC","setLoadingAC","getProfileThunkCreator","ProfileAPI","getProfile","then","data","profilePageReducer","ProfileContainer","this","getProfileThunk","setStatusUserThunk","match","params","updateProfile","prevProps","path","to","Component","compose","connect","profilePage","Auth","getStatus","newStatus","updateStatus","resultCode","alert","getState","messageError","messages","stopSubmit","_error","Promise","reject","withRouter","Sidebar","sidebar","isAuth","activeClassName","active","logoutThunk","loginButton","DropDownNavbar","addClassForToggle","toggle","Header","getUserPhoto","cursor","dropDownToogle","login","userlink","email","captcha","setAuthUserAC","toogleLoadingAC","authMeThunkCreator","meAPI","me","ResultCodesEnum","Success","getCaptchaThunkCreator","securityAPI","getCaptcha","url","authReducer","initialized","initializedUserPhotoAC","HeaderContainer","setState","initiliazedUserPhotoThunk","location","pathname","bind","app","logout","promise","Home","postBackground","img","backgroundImage","height","backgroundSize","backgroundRepeat","width","backgroundPosition","style","post3","post2","required","ReduxLoginForm","validate","Login","loginThunk","password","rememberMe","LoginContainer","getCaptchaThunk","Dialog","lastDataActivity","dialog","lastDialogActivityDate","lastDataActivShort","substr","userName","newMessagesCount","Dialogs","listDialogs","messagesWithFriend","countNesMessages","currentUserInChat","syncingAllMessages","setMessagesListWithFriendAC","setSuccessLoadingAC","syncAllMessagesAC","syncMessagesWithFrinedThunkCreator","dialogs","DialogsAPI","returnMessageThanDate","getListMessagesWithFriend","DialogsReducer","allDialogs","getAllDialogsThunk","getAllDialogs","ReduxMessageForm","container","Messages","regEx","getCurrentUserPhoto","authUserPhoto","alignMessage","senderId","leftAlignMessage","rightAlignMessage","messagesContain","chatTittle","mainChatBlock","chatBody","past__messages","getReturnMessageDateThunk","m","viewed","messagesWithFriendId","notViewedMessage","window","confirm","DeleteMessageTC","confirmmDeletingMessage","main__img__username","senderName","dateAdded","date","result","replace","split","addedAt","chatText","body","sendMessageToFriendThunk","newMessage","MessagesContainer","load","getListMessagesWithFriendThunk","ClearIntreval","SyncInterval","secondResponse","all","values","sendMessageToFriend","syncMessagesWithFrinedThunk","messageId","deleteMessage","GlobalErrors","catchAllUnhandelErrors","promiseRejectionEvent","reason","globalErrors","message","request","setTimeout","addEventListener","error_window","UsersContainer","lazy","App","initiliazedThunk","userIdi","timerID","setInterval","clearInterval","exact","render","fallback","Boolean","hostname","reducers","combineReducers","userPage","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","instance","axios","create","withCredentials","baseURL","headers","get","put","FormData","append","post","delete","startChatting","isViewedYourMessage","messageInSpam","restoreMessage","listNewMessage"],"mappings":"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","file":"static/js/main.91dd38f0.chunk.js","sourcesContent":["import { FollowAPI, UsersAPI } from \"../Api/Api\";\r\nimport { UserType } from \"../Types/UsersTypes\";\r\nimport { AppStateType } from \"./store-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_USERS_TOTAL_COUNT = 'SET_USERS_TOTAL_COUNT';\r\nconst SET_SEARCH_TERM = 'SET_SEARCH_TERM';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_FOLLOWING_PROGRESS = 'TOGGLE_FOLLOWING_PROGRESS'\r\n\r\n\r\nlet initialState = {\r\n    UsersList: [] as UserType[],\r\n    pageSize: 15,\r\n    totalUsers: 0,\r\n    currentPage: 1,\r\n    searchTerm: '',\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<Number>\r\n}\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst UsersPageReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                UsersList: state.UsersList.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: true }\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                UsersList: state.UsersList.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: false }\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                UsersList: action.UsersList,\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case SET_USERS_TOTAL_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsers: action.totalUsers\r\n            }\r\n        case SET_SEARCH_TERM:\r\n            return {\r\n                ...state,\r\n                searchTerm: action.text\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.userId]\r\n                    :\r\n                    state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\ntype ActionsType = FollowACType | UnFollowACType | SetUsersACType | SetCurrentPageACType |\r\nSetUsersTotalCountType | SetSearchTermACType | ToggleIsFetchingACType | ToggleFollowingInProgressACType\r\n\r\n//Action creators\r\ntype FollowACType = {\r\n    type: typeof FOLLOW,\r\n    userId: number\r\n}\r\nexport const followAC = (userId: number): FollowACType => {\r\n    return {\r\n        type: FOLLOW, userId\r\n    }\r\n}\r\ntype UnFollowACType = {\r\n    type: typeof UNFOLLOW,\r\n    userId: number\r\n}\r\nexport const unFollowAC = (userId: number): UnFollowACType => {\r\n    return {\r\n        type: UNFOLLOW, userId\r\n    }\r\n}\r\ntype SetUsersACType = {\r\n    type: typeof SET_USERS,\r\n    UsersList: UserType[]\r\n}\r\nexport const setUsersAC = (UsersList: UserType[]): SetUsersACType => {\r\n    return {\r\n        type: SET_USERS, UsersList\r\n    }\r\n}\r\ntype SetCurrentPageACType = {\r\n    type: typeof SET_CURRENT_PAGE,\r\n    currentPage: number\r\n}\r\nexport const setCurrentPageAC = (currentPage: number): SetCurrentPageACType => {\r\n    return {\r\n        type: SET_CURRENT_PAGE, currentPage\r\n    }\r\n}\r\ntype SetUsersTotalCountType = {\r\n    type: typeof SET_USERS_TOTAL_COUNT,\r\n    totalUsers: number\r\n}\r\nexport const setUsersTotalCount = (totalUsers: number): SetUsersTotalCountType => {\r\n    return {\r\n        type: SET_USERS_TOTAL_COUNT, totalUsers\r\n    }\r\n}\r\ntype SetSearchTermACType = {\r\n    type: typeof SET_SEARCH_TERM,\r\n    text: string\r\n}\r\nexport const setSearchTermAC = (text: string): SetSearchTermACType => {\r\n    return {\r\n        type: SET_SEARCH_TERM, text\r\n    }\r\n}\r\ntype ToggleIsFetchingACType = {\r\n    type: typeof TOGGLE_IS_FETCHING,\r\n    isFetching: boolean\r\n}\r\nexport const toggleIsFetchingAC = (isFetching: boolean): ToggleIsFetchingACType => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING, isFetching\r\n    }\r\n}\r\ntype ToggleFollowingInProgressACType = {\r\n    type: typeof TOGGLE_FOLLOWING_PROGRESS,\r\n    isFetching: boolean,\r\n    userId: number\r\n}\r\nexport const toggleFollowingInProgressAC = (isFetching: boolean, userId: number): ToggleFollowingInProgressACType => {\r\n    return {\r\n        type: TOGGLE_FOLLOWING_PROGRESS,\r\n        isFetching, userId\r\n    }\r\n}\r\n//thunks\r\n//тип который отдает весь стейт \r\n//и диспатч в котором наши экшены\r\n//первый способ return async (dispatch: DispatchType, getState:GetStateType)\r\n//второй ThunkAction\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionsType>\r\ntype ThunkType = ThunkAction<Promise<void>, GetStateType, unknown,ActionsType>\r\n\r\nexport const getUsersThunkCreator = (pageSize: number, currentPage: number):ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetchingAC(true));\r\n        let response = await UsersAPI.getUsers(pageSize, currentPage)\r\n        dispatch(toggleIsFetchingAC(false));\r\n        dispatch(setUsersAC(response.items));\r\n        dispatch(setUsersTotalCount(response.totalCount));\r\n    }\r\n}\r\nexport const setCurrentPageThunkCreator = (pageSize: number, pageNumber: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetchingAC(true));\r\n        dispatch(setCurrentPageAC(pageNumber));\r\n        let response = await UsersAPI.getUsers(pageSize, pageNumber)\r\n        dispatch(toggleIsFetchingAC(false));\r\n        dispatch(setUsersAC(response.items));\r\n        dispatch(setUsersTotalCount(response.totalCount));\r\n    }\r\n}\r\n\r\nexport const setSearchTermTextThunkCreator = (pageSize: number, text: string):ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetchingAC(true));\r\n        dispatch(setSearchTermAC(text));\r\n        if (!text) {\r\n            text = ' ';\r\n        }\r\n        let response = await UsersAPI.getUsersTerm(pageSize, text)\r\n        dispatch(toggleIsFetchingAC(false));\r\n        dispatch(setUsersAC(response.items));\r\n        dispatch(setUsersTotalCount(response.totalCount));\r\n    }\r\n}\r\n\r\n//так как это наша кастомная санка, то вбиваем тут же\r\n//dispatch - диспатч типов\r\n//userid - параметр id который принимает\r\n//methodApi - метод апи запроса\r\n//action - какой action creator будет использовать, принимает userid возврашает action creator в нашем случае:\r\nconst followUnfollowFlow = async (dispatch: DispatchType, userId: number, methoApi: any, action: (userId: number) => FollowACType | UnFollowACType) => {\r\n    dispatch(toggleFollowingInProgressAC(true, userId))\r\n    await methoApi(userId)\r\n    dispatch(action(userId));\r\n    dispatch(toggleFollowingInProgressAC(false, userId));\r\n}\r\n\r\n\r\nexport const unFollowUserThunkCreator = (userId: number):ThunkType => (dispatch) => {\r\n    return followUnfollowFlow(dispatch, userId, FollowAPI.unfollowUser, unFollowAC)\r\n}\r\n\r\n\r\nexport const followUserThunkCreator = (userId: number):ThunkType => (dispatch) => {\r\n    return followUnfollowFlow(dispatch, userId, FollowAPI.followUser, followAC)\r\n}\r\n\r\n\r\nexport default UsersPageReducer;","module.exports = __webpack_public_path__ + \"static/media/preloader.03527c20.svg\";","module.exports = __webpack_public_path__ + \"static/media/post2.44d32f35.jpg\";","module.exports = __webpack_public_path__ + \"static/media/post3.ca35cd79.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error_window\":\"GlobalErrors_error_window__p8TXP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerDialog\":\"Dialogs_containerDialog__rrem-\",\"listDialogs\":\"Dialogs_listDialogs__XA6H-\",\"leftAlignMessage\":\"Dialogs_leftAlignMessage__3trp5\",\"rightAlignMessage\":\"Dialogs_rightAlignMessage__1lZAT\",\"dialogUser\":\"Dialogs_dialogUser__29BMM\",\"userNameWithImg\":\"Dialogs_userNameWithImg__1skD-\",\"messagesContain\":\"Dialogs_messagesContain__3P22R\",\"NotViews\":\"Dialogs_NotViews__2BAA3\",\"messagesWithFriendId\":\"Dialogs_messagesWithFriendId__3z2eA\",\"dialog\":\"Dialogs_dialog__3YOCj\",\"notViewedMessage\":\"Dialogs_notViewedMessage__THu0M\",\"main__img__username\":\"Dialogs_main__img__username__1LDVY\",\"dateAdded\":\"Dialogs_dateAdded__1AFEk\",\"chatText\":\"Dialogs_chatText__-5mSB\",\"mainChatBlock\":\"Dialogs_mainChatBlock__2gTyh\",\"chatTittle\":\"Dialogs_chatTittle__3jG-F\",\"chatBody\":\"Dialogs_chatBody__3XZf2\",\"past__messages\":\"Dialogs_past__messages__1ZcWd\"};","import React from 'react';\r\nimport preloadImg from './preloader.svg'\r\nimport s from './preloader.module.css';\r\n\r\nlet Preloader = (props) => {\r\n    return (\r\n        <div className={s.preloadContain}>\r\n            <img src={preloadImg} className={s.preloader} alt=''/>\r\n        </div>\r\n    )\r\n}\r\nexport default Preloader;","import React from \"react\";\r\nimport s from './FormsControls.module.css';\r\n\r\ntype PropsType = {\r\n    input: {\r\n        name: string\r\n        onBlur:(event:any) => void\r\n        onChange:(event:any) => void\r\n        onDragStart:(event:any) => void\r\n        onDrop: (event:any) => void\r\n        onFocus: (event:any) => void\r\n        value: string\r\n    }\r\n    meta: {\r\n        active: boolean\r\n        asyncValidating: boolean\r\n        autofilled: boolean\r\n        dirty: boolean\r\n        error: undefined\r\n        form: string\r\n        initial: string\r\n        warning: undefined\r\n        invalid: boolean\r\n        pristine: boolean\r\n        submitting: boolean\r\n        submitFailed: boolean\r\n        touched: boolean\r\n        valid: boolean\r\n        visited: boolean\r\n    }\r\n    placeholder: string\r\n}\r\n\r\nexport const InputMessage:React.FC<PropsType> = ({input, meta, ...props}) => {\r\n    let activeError = meta.touched && meta.error ? s.error : ' ';\r\n    return (\r\n        <div className={s.FormControl}>\r\n            <div className={activeError}>\r\n                <input {...input} {...props} /><br/>\r\n                {meta.touched && meta.error && <span>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport const InputAuth:React.FC<PropsType> = ({input, meta, ...props}) => {\r\n    let activeError = meta.touched && meta.error ? s.error : ' ';\r\n    return (\r\n        <div className={s.FormControl}>\r\n            <div className={activeError}>\r\n                <input {...input} {...props} /><br/>\r\n                {meta.touched && meta.error && <span>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport const InputSearch:React.FC<PropsType> = ({input, meta, ...props}) => {\r\n    let activeError = meta.touched && meta.error ? s.error : ' ';\r\n    return (\r\n        <div className={s.FormControl}>\r\n            <div className={activeError}>\r\n                <input {...input} {...props} /><br/>\r\n                {meta.touched && meta.error && <span>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { Field, reduxForm, InjectedFormProps } from \"redux-form\";\r\nimport { InputMessage } from \"../../assets/FormControl/FormsControls\";\r\nimport s from \"./Profile.module.css\";\r\nimport { ProfileType } from '../../Types/ProfileTypes';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<PropsType & InjectedFormProps<{}, PropsType>> = (props) => {\r\n    return (\r\n        <div className={s.infoProfile}>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <button className='waves-effect waves-light btn-small indigo darken-4 mb10'>Save</button>\r\n                {props.error &&\r\n                    <div className={s.someError}>\r\n                        {props.error}\r\n                    </div>\r\n                }\r\n                <br />\r\n                <span><b>About me:</b></span>\r\n                <Field placeholder='About me' name='aboutMe' component={InputMessage} />\r\n                <span><b>Full name: </b></span>\r\n                <Field placeholder='Full Name' name='fullName' component={InputMessage} />\r\n                <span><b>Seek work: </b></span>\r\n                <Field placeholder='Looking for a job' type=\"checkbox\" name='lookingForAJob' component={InputMessage} />\r\n                <span><b>Description of the search: </b></span>\r\n                <Field placeholder='Looking for a job desc' name='lookingForAJobDescription' component={InputMessage} />\r\n                {Object.keys(props.profile.contacts).map(key =>\r\n                    <Contact key={key} contactTitle={key} contactBody={''} />\r\n                )}\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\ntype ContactsType = {\r\n    contactTitle: string\r\n    contactBody: string\r\n}\r\nconst Contact: React.FC<ContactsType> = ({ contactTitle, contactBody }) => {\r\n    return (\r\n        <div>\r\n            <span>\r\n                <b>{contactTitle}: </b>\r\n                <p>\r\n                    <a href={contactBody} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        {contactBody}\r\n                    </a>\r\n                </p>\r\n            </span>\r\n            <Field placeholder={`https://www.${contactTitle}.com`}\r\n                name={`contacts.${contactTitle}`} component={InputMessage} />\r\n        </div>\r\n    )\r\n}\r\nconst ReduxEditProfile = reduxForm<{}, PropsType>({ form: 'editProfile' })(ProfileDataForm)\r\n\r\nexport default ReduxEditProfile;\r\n\r\n","import React, { useEffect, useState, ChangeEvent } from 'react';\r\n\r\n\r\ntype PropsType = {\r\n    status: string | null\r\n    updateStatusUserThunk: (userId: number, status: string | null) => void\r\n    urlMatchParams: string | number\r\n    id: number | null\r\n}\r\n\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = React.memo(props => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState<string | null>(props.status);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        if (props.id) {\r\n            props.updateStatusUserThunk(props.id, status)\r\n        }\r\n    }\r\n    let onChangeTextStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n    //сохранение значения поля статуса при переходах.\r\n    //вместо componentDidUpdate\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n    //строка , [props.status], означает Перезапускать эффект только если props.status поменялся\r\n\r\n    const withEditStatus = () => {\r\n        //проверка страницы, если страница пользователя, то можно редактировать.\r\n        if (Number(props.urlMatchParams) === props.id) {\r\n            if (!editMode) {\r\n                return <span onDoubleClick={activateEditMode} data-tooltip=\"double click to change\">{!props.status ? <div>_____</div> : props.status}</span>\r\n            } else {\r\n                return <input onChange={onChangeTextStatus} autoFocus={true}\r\n                    onBlur={deactivateEditMode} value={status!} />\r\n            }\r\n        } else {\r\n            //просто вывод\r\n            return <div>\r\n                {!props.status ? <div>_____</div> : props.status}\r\n            </div>\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            {withEditStatus()}\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport default ProfileStatusWithHooks","import s from \"./Profile.module.css\";\r\nimport React from \"react\";\r\nimport { ProfileType } from './../../Types/ProfileTypes'\r\n\r\ntype PropsType = {\r\n    id: number | null\r\n    urlMatchParams: string\r\n    setEditProfile: (editMode: boolean) => void\r\n    profile: ProfileType\r\n    status: string | null\r\n}\r\n\r\nconst ProfileData: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.infoProfile}>\r\n            <div className={s.editButton}>\r\n                {props.id === Number(props.urlMatchParams) &&\r\n                    <p className='waves-effect waves-light btn-small indigo lighten-4 black-text mb10' onClick={() => {\r\n                        props.setEditProfile(true)\r\n                    }}>Edit\r\n                </p>\r\n                }\r\n            </div>\r\n            <hr />\r\n            <div className=\"row\">\r\n                <div className=\"col s6\">\r\n                    <b>About me: </b>\r\n                </div>\r\n                <div className=\"col s6 right-align\">\r\n                    <p>{props.profile.aboutMe}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col s6\">\r\n                    <b>Full name: </b>\r\n                </div>\r\n                <div className=\"col s6 right-align\">\r\n                    <p>{props.profile.fullName}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col s6\">\r\n                    <b>Status:</b>\r\n                </div>\r\n                <div className=\"col s6 right-align\">\r\n                    <p>{props.status}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col s6\">\r\n                    <b>Seek work: </b>\r\n                </div>\r\n                <div className=\"col s6 right-align\">\r\n                    <p>{props.profile.lookingForAJob ? 'yes' : 'no'}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col s6\">\r\n                    <b>Description of the search: </b>\r\n                </div>\r\n                <div className=\"col s6 right-align\">\r\n                    <p>{props.profile.lookingForAJobDescription}</p>\r\n                </div>\r\n            </div>\r\n            {Object.keys(props.profile.contacts).map((key: any) =>\r\n                <Contact key={key} contactTitle={key} contactBody={props.profile.contacts[key]} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\ntype ContactsType = {\r\n    contactTitle: string\r\n    contactBody: string | {}\r\n}\r\nconst Contact: React.FC<ContactsType> = ({ contactTitle, contactBody }) => {\r\n    return (\r\n        <div>\r\n            {!!contactBody &&\r\n                <div className=\"row\">\r\n                    <div className=\"col s4\">\r\n                        <b>{contactTitle}: </b>\r\n                    </div>\r\n                    <div className=\"col s8 right-align\">\r\n                        {typeof (contactBody) === \"string\" ?\r\n                            <a href={contactBody} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                {contactBody}\r\n                            </a>\r\n                            :\r\n                            ' ' + console.log('ERR_3000__contact')\r\n                        }\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ProfileData;","import React, { useState } from 'react';\r\nimport Preloader from \"../../assets/preloader/Preloader\";\r\nimport s from './Profile.module.css';\r\nimport ReduxEditProfile from \"./ProfileDataForm\";\r\n\r\nimport userPhoto from './../../assets/images/userPhoto.png'\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileData from \"./ProfileData\";\r\nimport { ProfileType } from '../../Types/ProfileTypes';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    updateProfileUserThunk: (profile: ProfileType) => void\r\n    uploadNewPhotoThunk: (photo: File) => void\r\n    loading: boolean\r\n    id: number | null\r\n    urlMatchParams: string\r\n    status: string | null\r\n    updateStatusUserThunk: (userId: number, newStatus: string | null) => void\r\n}\r\nconst Profile: React.FC<PropsType> = React.memo(props => {\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n    let [editProfile, setEditProfile] = useState(false);\r\n    //update profile\r\n    const onSubmit = (formData: any) => {\r\n        if (formData === props.profile) {\r\n            setEditProfile(false)\r\n        } else {\r\n            props.updateProfileUserThunk(formData)\r\n            setEditProfile(false)\r\n        }\r\n    }\r\n    //upload photo\r\n    let onUploadNewPhoto = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files !== null) {\r\n            if (e.target.files.length) {\r\n                props.uploadNewPhotoThunk(e.target.files[0])\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <div className={s.profileContain}>\r\n            {props.loading ? <Preloader /> :\r\n                <>\r\n                    <div className='row profile'>\r\n                        <div className=\"col\">\r\n                            <div className={s.avatarBlock}>\r\n                                <img src={!props.profile.photos.small ? userPhoto : props.profile.photos.large} alt='' />\r\n                                {props.id === Number(props.urlMatchParams) &&\r\n                                    // upload photo for myProfile\r\n                                    <div>\r\n                                        <input type=\"file\" name=\"myFile\" id=\"myFile\" onChange={onUploadNewPhoto} />\r\n                                        <label htmlFor=\"myFile\" className={s.uploadPhoto}\r\n                                            data-tooltip=\"click to upload a photo\"> </label>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col s6\">\r\n                            <h5>{props.profile.fullName}</h5>\r\n                            <ProfileStatusWithHooks status={props.status}\r\n                                updateStatusUserThunk={props.updateStatusUserThunk}\r\n                                id={props.id}\r\n                                urlMatchParams={props.urlMatchParams} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row profile\">\r\n                        <div className=\"col s12\">\r\n                            {editProfile ?\r\n                                <ReduxEditProfile initialValues={props.profile} onSubmit={onSubmit} profile={props.profile} />\r\n                                :\r\n                                <ProfileData profile={props.profile}\r\n                                    status={props.status}\r\n                                    id={props.id}\r\n                                    urlMatchParams={props.urlMatchParams}\r\n                                    setEditProfile={setEditProfile}\r\n                                />\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Profile\r\n","import { ProfileAPI } from \"../Api/Api\";\r\nimport { stopSubmit } from \"redux-form\";\r\nimport { ProfileType, PhotosType } from \"../Types/ProfileTypes\";\r\nimport { AppStateType } from \"./store-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\n\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst SET_NEW_PHOTO = 'SET_NEW_PHOTO'\r\nconst SET_SUCCESS_LOADING = 'SET_SUCCESS_LOADING'\r\n\r\nlet initialState = {\r\n    profile: {\r\n        userId: 0,\r\n        lookingForAJob: false,\r\n        lookingForAJobDescription: '',\r\n        fullName: '',\r\n        contacts: {},\r\n        photos: {small: '',large: ''},\r\n        aboutMe: ''\r\n    } as ProfileType,\r\n    status: \"\",\r\n    loading: false\r\n}\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst profilePageReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case SET_NEW_PHOTO:\r\n            return {\r\n                ...state,\r\n                profile: { ...state.profile, photos: action.photos }\r\n            }\r\n        case SET_SUCCESS_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: action.loading\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsType = SetUserProfileACType | SetStatusUserACType | UploadNewPhotoACType |\r\n    SetLoadingACType\r\n//actions creator\r\ntype SetUserProfileACType = {\r\n    type: typeof SET_USER_PROFILE,\r\n    profile: ProfileType\r\n}\r\nexport const setUserProfileAC = (profile: ProfileType): SetUserProfileACType => {\r\n    return {\r\n        type: SET_USER_PROFILE, profile\r\n    }\r\n}\r\ntype SetStatusUserACType = {\r\n    type: typeof SET_STATUS,\r\n    status: string\r\n}\r\nexport const setStatusUserAC = (status: string): SetStatusUserACType => {\r\n    return {\r\n        type: SET_STATUS, status\r\n    }\r\n}\r\ntype UploadNewPhotoACType = {\r\n    type: typeof SET_NEW_PHOTO,\r\n    photos: PhotosType\r\n}\r\nexport const uploadNewPhotoAC = (photos: PhotosType): UploadNewPhotoACType => {\r\n    return {\r\n        type: SET_NEW_PHOTO, photos\r\n    }\r\n}\r\ntype SetLoadingACType = {\r\n    type: typeof SET_SUCCESS_LOADING,\r\n    loading: boolean\r\n}\r\nexport const setLoadingAC = (loading: boolean): SetLoadingACType => {\r\n    return {\r\n        type: SET_SUCCESS_LOADING, loading\r\n    }\r\n}\r\n//thunks\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionsType>\r\ntype ThunkActionType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\n\r\nexport const getProfileThunkCreator = (userId: number): ThunkActionType => {\r\n    return async (dispatch) => {\r\n        if (!userId) {\r\n            //none\r\n        } else {\r\n            await ProfileAPI.getProfile(userId)\r\n                .then((response: { data: ProfileType; }) => {\r\n                    dispatch(setUserProfileAC(response.data));\r\n                })\r\n        }\r\n    }\r\n}\r\n//получение статуса пользователя\r\nexport const setStatusUserThunkCreator = (userId: number): ThunkActionType => {\r\n    return async (dispatch) => {\r\n        if (!userId) {\r\n            //none\r\n        } else {\r\n            await ProfileAPI.getStatus(userId).then(response => {\r\n                dispatch(setStatusUserAC(response.data))\r\n            })\r\n        }\r\n    }\r\n}\r\ntype UpdateStatusResponseType = {\r\n    data: {\r\n        resultCode: number\r\n    }\r\n}\r\nexport const updateStatusUserThunkCreator = (userId: number, newStatus: string | null): ThunkActionType => {\r\n    return async (dispatch) => {\r\n        //проверка на изменение входящего текста\r\n        await ProfileAPI.getStatus(userId).then((response: { data: string }) => {\r\n            dispatch(setStatusUserAC(response.data))\r\n            if (!newStatus) {\r\n                alert('field empty')\r\n            } else {\r\n                if (response.data !== newStatus) {\r\n                    dispatch(setLoadingAC(true));\r\n                    ProfileAPI.updateStatus(newStatus).then((response: UpdateStatusResponseType) => {\r\n                        if (response.data.resultCode === 0) {\r\n                            dispatch(setStatusUserAC(newStatus))\r\n                            dispatch(setLoadingAC(false));\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        })\r\n        //end\r\n    }\r\n}\r\n\r\nexport const updateProfileUserThunkCreator = (profile: ProfileType): ThunkActionType =>\r\n    async (dispatch: any, getState) => {\r\n        dispatch(setLoadingAC(true));\r\n        return await ProfileAPI.updateProfile(profile).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                const userId = getState().Auth.id;\r\n                if (userId) {\r\n                    dispatch(getProfileThunkCreator(userId));\r\n                    dispatch(setLoadingAC(false));\r\n                }\r\n                dispatch(setLoadingAC(false));\r\n            } else {\r\n                let messageError = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n                dispatch(stopSubmit(\"editProfile\", { _error: messageError }))\r\n                dispatch(setLoadingAC(false));\r\n                return Promise.reject(response.data.messages[0]);\r\n            }\r\n        })\r\n\r\n    }\r\n\r\nexport const uploadNewPhotoThunkCreator = (photos:File): ThunkActionType => async (dispatch) => {\r\n    dispatch(setLoadingAC(true));\r\n    let response = await ProfileAPI.uploadPhoto(photos)\r\n    dispatch(setLoadingAC(false));\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(uploadNewPhotoAC(response.data.data.photos));\r\n    }\r\n}\r\n\r\nexport default profilePageReducer;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    getProfileThunkCreator,\r\n    setStatusUserThunkCreator,\r\n    updateProfileUserThunkCreator, updateStatusUserThunkCreator, uploadNewPhotoThunkCreator\r\n} from \"../../redux/ProfilePage-Reducer\";\r\nimport { Redirect, withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\nimport { ProfileType } from '../../Types/ProfileTypes';\r\nimport { AppStateType } from '../../redux/store-redux';\r\n\r\ntype MapStateType = {\r\n    id: number | null\r\n    profile: ProfileType\r\n    status: string | null\r\n    loading: boolean\r\n}\r\ntype WithRouterType = {\r\n    match: {\r\n        params: {\r\n            userId: string\r\n        }\r\n    }\r\n}\r\ntype MapDispatchType = {\r\n    getProfileThunk: (userId: number) => void\r\n    setStatusUserThunk: (userId: number) => void\r\n    updateStatusUserThunk: (userId: number, newStatus: string | null) => void\r\n    updateProfileUserThunk: (profile: ProfileType) => void\r\n    uploadNewPhotoThunk: (photo: File) => void\r\n}\r\ntype PropsType = MapStateType & MapDispatchType & WithRouterType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    updateProfile(userId: number) {\r\n        this.props.getProfileThunk(userId);\r\n        this.props.setStatusUserThunk(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        //Установка профиля пользователя\r\n        //проверяем из url пользователя по параметрам\r\n        let userId = Number(this.props.match.params.userId);\r\n        this.updateProfile(userId);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType) {\r\n        //обновление профилей при смене url\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.updateProfile(Number(this.props.match.params.userId));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //добавление url\r\n        if (!this.props.match.params.userId) {\r\n            if (!this.props.id) {\r\n                return <Redirect to={'/login'} />\r\n            } else {\r\n                let path = `/profile/${this.props.id}`;\r\n                return <Redirect to={path} />\r\n            }\r\n        }\r\n        return (\r\n            <Profile profile={this.props.profile} status={this.props.status}\r\n                updateStatusUserThunk={this.props.updateStatusUserThunk}\r\n                id={this.props.id}\r\n                //math params для изменения статуса\r\n                urlMatchParams={this.props.match.params.userId}\r\n                updateProfileUserThunk={this.props.updateProfileUserThunk}\r\n                uploadNewPhotoThunk={this.props.uploadNewPhotoThunk}\r\n                loading={this.props.loading}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        id: state.Auth.id,\r\n        status: state.profilePage.status,\r\n        loading: state.profilePage.loading\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect<MapStateType, MapDispatchType, null, AppStateType>\r\n        (mapStateToProps,\r\n            {\r\n                // setUser: setUserProfileAC,\r\n                getProfileThunk: getProfileThunkCreator,\r\n                setStatusUserThunk: setStatusUserThunkCreator,\r\n                updateStatusUserThunk: updateStatusUserThunkCreator,\r\n                updateProfileUserThunk: updateProfileUserThunkCreator,\r\n                uploadNewPhotoThunk: uploadNewPhotoThunkCreator\r\n            }),\r\n    withRouter\r\n)(ProfileContainer)\r\n","import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from './Sidebar.module.css';\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    logoutThunk: () => void\r\n}\r\n\r\nconst Sidebar:React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.sidebar}>\r\n            <ul>\r\n                {props.isAuth ?\r\n                    <>\r\n                        <li>\r\n                            <NavLink to='/profile/' activeClassName={s.active}> Profile </NavLink><br />\r\n                        </li>\r\n                        <li>\r\n                            <NavLink to='/Dialogs' activeClassName={s.active}> Dialogs </NavLink><br />\r\n                        </li>\r\n                        <li>\r\n                            <NavLink to='/Users' activeClassName={s.active}> Users </NavLink><br />\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={props.logoutThunk} className={s.loginButton}>\r\n                                Log out\r\n                        </button>\r\n                        </li>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <li>\r\n                            <NavLink to='/Dialogs' activeClassName={s.active}> Dialogs </NavLink><br />\r\n                        </li>\r\n                        <li>\r\n                            <NavLink to='/Users' activeClassName={s.active}> Users </NavLink><br />\r\n                        </li>\r\n                        <li>\r\n                            <button className={s.loginButton}>\r\n                                <NavLink to='/login/'>\r\n                                    Login\r\n                                </NavLink>\r\n                            </button>\r\n                        </li>\r\n                    </>\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;\r\n","import React from 'react';\r\nimport Sidebar from '../Sidebar/SIdebar';\r\n\r\n\r\ntype PropsType = {\r\n    toggle: boolean\r\n    logoutThunk: () => void\r\n    isAuth: boolean\r\n}\r\nconst DropDownNavbar:React.FC<PropsType> = (props) => {\r\n    let addClassForToggle = props.toggle ? ' active' : '';\r\n    return (\r\n        <div className=\"container blockDrop\">\r\n            <div className={'dropdownMenu' + addClassForToggle}>\r\n                <Sidebar logoutThunk={props.logoutThunk} isAuth={props.isAuth} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DropDownNavbar","import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport './../../App.css';\r\nimport s from './Header.module.css';\r\nimport userPhoto from './../../assets/images/userPhoto.png'\r\nimport DropDownNavbar from './DropDownNavbar';\r\n\r\ntype PropsType = {\r\n    userPhoto: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n    isAuth: boolean\r\n    login: string | null\r\n    dropDownToogle: () => void\r\n    logoutThunk: () => void\r\n    toggle: boolean\r\n}\r\n\r\nconst Header: React.FC<PropsType> = (props) => {\r\n    let getUserPhoto = !props.userPhoto.small || !props.userPhoto.large ?\r\n        <img src={userPhoto} alt='' className={s.userPhoto} />\r\n        :\r\n        <img src={props.userPhoto.small} alt={''} className={s.userPhoto} /> ||\r\n        <img src={props.userPhoto.large} alt={''} className={s.userPhoto} />\r\n\r\n    return (\r\n        <>\r\n            <nav className={'grey darken-4'}>\r\n                <div className=\"nav-wrapper\">\r\n                    <div className=\"container\">\r\n                        <NavLink to='/' className='logo'>Home</NavLink>\r\n                        <ul className={\"right \" + s.cursor} onClick={() => { props.dropDownToogle() }}>\r\n                            {props.isAuth ?\r\n                                <>\r\n                                    <li><h5>{props.login}</h5></li>\r\n                                    <p className={s.userlink}>\r\n                                        <li className='btn-floating btn-large waves-effect waves-light grey darken-4'>\r\n                                            {getUserPhoto}\r\n                                        </li>\r\n                                    </p>\r\n                                    <li>\r\n                                        <i className=\"small material-icons\">expand_more</i>\r\n                                    </li>\r\n                                </>\r\n                                :\r\n                                <>\r\n                                    <li>\r\n                                        <i className=\"material-icons\">drag_handle</i>\r\n                                    </li>\r\n                                </>\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n            <DropDownNavbar logoutThunk={props.logoutThunk} toggle={props.toggle} isAuth={props.isAuth} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header;","import { meAPI, securityAPI, ResultCodesEnum } from \"../Api/Api\";\r\nimport { stopSubmit } from \"redux-form\";\r\nimport { AppStateType } from \"./store-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\n\r\nconst SET_AUTH_USER = 'SET_AUTH_USER';\r\nconst SET_SUCCESS_CAPTCHA = 'SET_SUCCESS_CAPTCHA';\r\nconst TOOGLE_LOADING = 'TOOGLE_LOADING';\r\n//длинная запись\r\n// type InitialStateType2 = {\r\n//     id: number | null\r\n//     login: string | null\r\n//     email: string | null\r\n//     isAuth: boolean \r\n//     captcha: string | null\r\n// }\r\ntype InitialStateType = typeof initialState;\r\nlet initialState = {\r\n    id: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null,\r\n    isAuth: false,\r\n    captcha: '' as string,\r\n    loading: false\r\n}\r\n//коротая запись установки типа, автоматически\r\n//но указав as, даем понятие четкого типа\r\n\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_AUTH_USER:\r\n        case SET_SUCCESS_CAPTCHA:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        case TOOGLE_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: action.loading\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsType = SetAuthUserACType | SetSuccessCaptchaACType |\r\n    ToogleLoadingACType | SetSuccessCaptchaACType\r\n//actions creators\r\ntype DataSetAuthUserACType = {\r\n    id: number | null\r\n    login: string | null\r\n    email: string | null\r\n    isAuth: boolean\r\n}\r\ntype SetAuthUserACType = {\r\n    type: typeof SET_AUTH_USER,\r\n    data: DataSetAuthUserACType\r\n}\r\n\r\nexport const setAuthUserAC =\r\n    (id: number | null, login: string | null, email: string | null, isAuth: boolean): SetAuthUserACType => {\r\n        return {\r\n            type: SET_AUTH_USER,\r\n            data: { id, login, email, isAuth }\r\n        }\r\n    }\r\n\r\ntype ToogleLoadingACType = {\r\n    type: typeof TOOGLE_LOADING,\r\n    loading: boolean\r\n}\r\nexport const toogleLoadingAC = (loading: boolean): ToogleLoadingACType => {\r\n    return {\r\n        type: TOOGLE_LOADING,\r\n        loading\r\n    }\r\n}\r\ntype SetSuccessCaptchaACType = {\r\n    type: typeof SET_SUCCESS_CAPTCHA,\r\n    data: {\r\n        captcha: string\r\n    }\r\n}\r\nexport const setSuccessCaptchaAC = (captcha: string): SetSuccessCaptchaACType => {\r\n    return {\r\n        type: SET_SUCCESS_CAPTCHA,\r\n        data: { captcha }\r\n    }\r\n}\r\n//thunks\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionsType>\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>\r\n\r\nexport const authMeThunkCreator = (): ThunkType => async (dispatch) => {\r\n    dispatch(toogleLoadingAC(true));\r\n    return await meAPI.me().then((response) => {\r\n        //вставили enum, который дает понятие возвращаемых ошибок\r\n        //подробнее в api.ts\r\n        if (response.data.resultCode === ResultCodesEnum.Success) {\r\n            let { id, login, email } = response.data.data;\r\n            dispatch(setAuthUserAC(id, login, email, true))\r\n            dispatch(toogleLoadingAC(false));\r\n        } else {\r\n            dispatch(toogleLoadingAC(false));\r\n        }\r\n    })\r\n}\r\ntype loginThunkCreatorType = {\r\n    response: {}\r\n    data: {\r\n        resultCode: number;\r\n        messages: string[]\r\n    }\r\n}\r\nexport const loginThunkCreator =\r\n    (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => (dispatch: any) => {\r\n        dispatch(toogleLoadingAC(true));\r\n        meAPI.login(email, password, rememberMe, captcha).then((response: any) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(authMeThunkCreator())\r\n                dispatch(toogleLoadingAC(false));\r\n            } else {\r\n                if (response.data.resultCode === 10) {\r\n                    dispatch(getCaptchaThunkCreator());\r\n                    dispatch(toogleLoadingAC(false));\r\n                }\r\n                let messageError = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n                dispatch(stopSubmit(\"login\", { _error: messageError }))\r\n                dispatch(toogleLoadingAC(false));\r\n            }\r\n        })\r\n    }\r\ntype LogoutThunkCreatorType = {\r\n    response: {};\r\n    data: {\r\n        resultCode: number\r\n    }\r\n}\r\nexport const logoutThunkCreator = (): ThunkType => (dispatch) => {\r\n    dispatch(toogleLoadingAC(true));\r\n    meAPI.logout().then((response: any) => {\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserAC(null, null, null, false))\r\n            dispatch(toogleLoadingAC(false));\r\n        } else {\r\n            dispatch(toogleLoadingAC(false));\r\n        }\r\n    })\r\n}\r\nexport const getCaptchaThunkCreator = (): ThunkType => async (dispatch) => {\r\n    dispatch(toogleLoadingAC(true));\r\n    let response = await securityAPI.getCaptcha();\r\n    dispatch(setSuccessCaptchaAC(response.data.url))\r\n    dispatch(toogleLoadingAC(false));\r\n}\r\n\r\nexport default authReducer;","import { authMeThunkCreator } from \"./Auth-Reducer\";\r\nimport { ProfileAPI } from \"../Api/Api\";\r\nimport { IinitialStateType } from \"../Types/AppTypes\"\r\nimport { AppStateType } from \"./store-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\nconst INITIALIZED_USER_PHOTO = 'INITIALIZED_USER_PHOTO';\r\n\r\n\r\nlet initialState: IinitialStateType = {\r\n    initialized: false,\r\n    userPhoto: {\r\n        small: '',\r\n        large: ''\r\n    }\r\n}\r\nexport const appReducer = (state = initialState, action: ActionsType): IinitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        case INITIALIZED_USER_PHOTO:\r\n            return {\r\n                ...state,\r\n                userPhoto: action.userPhoto\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsType = InitializedSuccessACType | InitializedUserPhotoACType\r\n//actions creators\r\ntype InitializedSuccessACType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\nexport const initializedSuccessAC = (): InitializedSuccessACType => {\r\n    return {\r\n        type: INITIALIZED_SUCCESS\r\n    }\r\n}\r\ntype InitializedUserPhotoACType = {\r\n    type: typeof INITIALIZED_USER_PHOTO,\r\n    userPhoto: { small: string, large: string }\r\n}\r\nexport const initializedUserPhotoAC = (userPhoto: { small: string, large: string }): InitializedUserPhotoACType => {\r\n    return {\r\n        type: INITIALIZED_USER_PHOTO,\r\n        userPhoto\r\n    }\r\n}\r\n//thunks\r\ntype GetState = () => AppStateType\r\ntype DispatchType = Dispatch<ActionsType>\r\ntype ThunkType = ThunkAction<Promise<void>, GetState, unknown, ActionsType>\r\n\r\nexport const initiliazedThunkCreator = (): ThunkType => async (dispatch: any) => {\r\n    let promise = dispatch(authMeThunkCreator());\r\n    promise.then(() => {\r\n        dispatch(initializedSuccessAC());\r\n    })\r\n}\r\nexport const initiliazedUserPhotoThunkCreator = (userId: number): ThunkType => async (dispatch) => {\r\n    if (!userId) {\r\n        //none\r\n    } else {\r\n        let promise = await ProfileAPI.getProfile(userId);\r\n        dispatch(initializedUserPhotoAC(promise.data.photos));\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport { connect } from \"react-redux\";\r\nimport { logoutThunkCreator } from \"../../redux/Auth-Reducer\";\r\nimport { initiliazedUserPhotoThunkCreator } from \"../../redux/App-Reducer\";\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from \"../../redux/store-redux\";\r\n\r\n\r\ntype MapStateType = {\r\n    id: number | null\r\n    userPhoto: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype MapDispatchType = {\r\n    initiliazedUserPhotoThunk: (id: number) => void\r\n    logoutThunk: () => void\r\n}\r\ntype WithRouterType = {\r\n    location: {\r\n        pathname: string\r\n    }\r\n}\r\ntype StateType = {\r\n    toggle: boolean\r\n}\r\ntype PropsType = MapStateType & MapDispatchType & WithRouterType\r\n\r\nclass HeaderContainer extends React.Component<PropsType, StateType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n        this.state = { toggle: false };\r\n    }\r\n    dropDownToogle() {\r\n        this.setState({\r\n            toggle: !this.state.toggle\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.id) {\r\n            this.props.initiliazedUserPhotoThunk(this.props.id);\r\n        }\r\n    }\r\n    //when changing accounts, the avatar does not change, correction\r\n    componentDidUpdate(prevProps: PropsType) {\r\n        if (prevProps.id !== this.props.id) {\r\n            if (this.props.id === null) {\r\n                //none\r\n            } else {\r\n                this.props.initiliazedUserPhotoThunk(this.props.id);\r\n            }\r\n        }\r\n        if (prevProps.location.pathname !== this.props.location.pathname) {\r\n            this.setState({\r\n                toggle: false\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Header userPhoto={this.props.userPhoto} dropDownToogle={this.dropDownToogle.bind(this)}\r\n                toggle={this.state.toggle} isAuth={this.props.isAuth} login={this.props.login}\r\n                logoutThunk={this.props.logoutThunk}\r\n            />\r\n        )\r\n    }\r\n}\r\nlet mapStateToProps = (state: AppStateType): MapStateType => {\r\n    return {\r\n        isAuth: state.Auth.isAuth,\r\n        login: state.Auth.login,\r\n        id: state.Auth.id,\r\n        userPhoto: state.app.userPhoto\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect<MapStateType, MapDispatchType, null, AppStateType>\r\n        (mapStateToProps, {\r\n            logoutThunk: logoutThunkCreator,\r\n            initiliazedUserPhotoThunk: initiliazedUserPhotoThunkCreator\r\n        }),\r\n    withRouter)(HeaderContainer);","import React from 'react';\r\nimport post2 from './../../assets/images/post2.jpg'\r\nimport post3 from './../../assets/images/post3.jpg'\r\n\r\nconst Home = () => {\r\n    const postBackground = (img: string) => {\r\n        return {\r\n            backgroundImage: 'url(' + img + ')',\r\n            height: '35vh',\r\n            backgroundSize: 'cover',\r\n            backgroundRepeat: 'no-repeat',\r\n            width: '100%',\r\n            backgroundPosition: 'center'\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <div className=\"container post\">\r\n                <div className=\"row\">\r\n                    <div className=\"col s12 m12\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-image waves-effect waves-block waves-light activator\" style={postBackground(post3)}>\r\n                                <i className=\"material-icons small right white-text activator mr10\">more_horiz</i>\r\n                                <span className=\"card-title activator\">Update v3.0</span>\r\n                            </div>\r\n                            <div className=\"card-content\">\r\n                                <p>\r\n                                    In this update,\r\n                                    almost the entire application is rewritten in typescript,\r\n                                    and most bugs and bugs are fixed.\r\n                                <br />\r\n                                    <b>Changes</b>:\r\n                            </p>\r\n                                <ul>\r\n                                    <li>\r\n                                        Project typing\r\n                                    </li>\r\n                                    <li>\r\n                                        Fixed synchronization of messages\r\n                                </li>\r\n                                    <li>\r\n                                        Syncing messages based on past messages\r\n                                </li>\r\n                                    <li>\r\n                                        Changed the appearance of the chat\r\n                                </li>\r\n                                    <li>\r\n                                        Added the ability to delete messages by click\r\n                                </li>\r\n                                </ul>\r\n                            </div>\r\n                            <div className=\"card-action\">\r\n                                <a href=\"https://github.com/sieugene/ReactLearning\" target='_blank' rel=\"noopener noreferrer\">\r\n                                    Repository link\r\n                                </a>\r\n                            </div>\r\n                            <div className=\"card-reveal\">\r\n                                <span className=\"card-title grey-text text-darken-4\">\r\n                                    Info\r\n                                    <i className=\"material-icons right\">close</i>\r\n                                </span>\r\n                                <h5>This is my first social network\r\n                                that I develop on react.<br />\r\n                                This social network was created at the rate of \"it-incubator\"<br />\r\n                                Using libraries: React and Redux (Thunk, Axios,redux-form).\r\n                                    </h5>\r\n                                <b>API: <a href=\"https://social-network.samuraijs.com/\" target='_blank' rel=\"noopener noreferrer\">\r\n                                    https://social-network.samuraijs.com/\r\n                                    </a>\r\n                                </b>\r\n                                <p>\r\n                                    At this point, the user can:\r\n                                </p>\r\n                                <ul>\r\n                                    <li>Log in(there is validation, captcha)</li>\r\n                                    <li>To change the profile information</li>\r\n                                    <li>Subscribe to other users</li>\r\n                                    <li>Write messages to users</li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col s12 m12\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-image waves-effect waves-block waves-light activator\" style={postBackground(post2)}>\r\n                                <i className=\"material-icons small right white-text activator mr10\">more_horiz</i>\r\n                                <span className=\"card-title activator\">Update v2.0</span>\r\n                            </div>\r\n                            <div className=\"card-content\">\r\n                                <p>\r\n                                    In this update,\r\n                                    I changed the external part of the\r\n                                    application, refactored the code,\r\n                                    connected typescript and started\r\n                                    making small changes, at the moment\r\n                             there are not big bugs.<br />\r\n                                    <b>Changes</b>:\r\n                            </p>\r\n                                <ul>\r\n                                    <li>\r\n                                        Changed the design\r\n                                </li>\r\n                                    <li>\r\n                                        Syncing messages without reloading\r\n                                </li>\r\n                                    <li>\r\n                                        More secure routing\r\n                                </li>\r\n                                    <li>\r\n                                        Message counter(only with reload)\r\n                                </li>\r\n                                    <li>\r\n                                        Error output\r\n                                </li>\r\n                                </ul>\r\n                            </div>\r\n                            <div className=\"card-action\">\r\n                                <a href=\"https://github.com/sieugene/ReactLearning\" target='_blank' rel=\"noopener noreferrer\">\r\n                                    Repository link\r\n                                </a>\r\n                            </div>\r\n                            <div className=\"card-reveal\">\r\n                                <span className=\"card-title grey-text text-darken-4\">\r\n                                    Info\r\n                                    <i className=\"material-icons right\">close</i>\r\n                                </span>\r\n                                <h5>This is my first social network\r\n                                that I develop on react.<br />\r\n                                This social network was created at the rate of \"it-incubator\"<br />\r\n                                Using libraries: React and Redux (Thunk, Axios,redux-form).\r\n                                    </h5>\r\n                                <b>API: <a href=\"https://social-network.samuraijs.com/\" target='_blank' rel=\"noopener noreferrer\">\r\n                                    https://social-network.samuraijs.com/\r\n                                    </a>\r\n                                </b>\r\n                                <p>\r\n                                    At this point, the user can:\r\n                                </p>\r\n                                <ul>\r\n                                    <li>Log in(there is validation, captcha)</li>\r\n                                    <li>To change the profile information</li>\r\n                                    <li>Subscribe to other users</li>\r\n                                    <li>Write messages to users</li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home","\r\nexport const required = (value) => {\r\n    if(value) return undefined;\r\n    return 'Some errors';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if(value.length > maxLength) return 'Maximum number of characters ' + maxLength;\r\n    return undefined\r\n}\r\n","import React from 'react'\r\nimport { reduxForm, InjectedFormProps } from 'redux-form';\r\nimport { Field } from 'redux-form';\r\nimport { InputAuth } from '../../assets/FormControl/FormsControls';\r\nimport { required } from '../utils/validators/validators';\r\nimport s from './../../assets/FormControl/FormsControls.module.css';\r\nimport { LoginFormValueType } from './Login';\r\n\r\ntype PropsType = {\r\n    captcha?: string\r\n}\r\n//<InjectedFormProps<LoginFormValueType,PropsType> & PropsType>\r\n//если что-то не работает PropsType Login.tsx а не формы\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValueType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder='Email' validate={[required]} name='email' component={InputAuth} />\r\n            </div>\r\n            <div>\r\n                <Field placeholder='Password' validate={[required]}\r\n                    name='password' type='Password' component={InputAuth} />\r\n            </div>\r\n            <div>\r\n                <p>\r\n                    <label>\r\n                        <Field name='rememberMe' component=\"input\" type=\"Checkbox\" />\r\n                        <span>Remember Me</span>\r\n                    </label>\r\n                </p>\r\n            </div>\r\n            {props.error && <div className={s.someError}>{props.error}</div>}\r\n            {props.captcha && <div><img src={props.captcha} alt={''} /></div>}\r\n            {props.captcha && <div><Field placeholder='enter symbols' name='captcha' component='input'\r\n                validate={[required]} /></div>}\r\n            <button className='waves-effect waves-light btn-small mr10'>Login</button>\r\n            <a href='https://social-network.samuraijs.com/'\r\n                target='_blank' className='waves-effect waves-light btn-small  deep-purple lighten-1' rel=\"noopener noreferrer\">\r\n                Go to API\r\n                </a>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ReduxLoginForm = reduxForm<LoginFormValueType,PropsType>({ form: 'login' })(LoginForm)","import React from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Preloader from '../../assets/preloader/Preloader';\r\nimport { ReduxLoginForm } from './LoginForm';\r\n\r\ntype PropsType = {\r\n    isAuth: boolean,\r\n    loading: boolean,\r\n    captcha: string,\r\n    loginThunk: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\nexport type LoginFormValueType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}\r\n\r\nconst Login:React.FC<PropsType> = (props) => {\r\n    let onSubmit = (formData:LoginFormValueType) => {\r\n        //авторизация\r\n        props.loginThunk(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n    return (\r\n        <div>\r\n            {props.loading && <Preloader />}\r\n            <div className=\"authBlock\">\r\n                <h3>Login</h3>\r\n                <ReduxLoginForm onSubmit={onSubmit} captcha={props.captcha} />\r\n                <h3>Use to log in:</h3>\r\n                <ul>\r\n                    <li>\r\n                        <h5>\r\n                            Email: free@samuraijs.com\r\n                    </h5>\r\n                    </li>\r\n                    <li>\r\n                        <h5>\r\n                            Password: free\r\n                    </h5>\r\n                    </li>\r\n                </ul>\r\n                <h5>If authorization does not work, do it\r\n                <a href=\"https://social-network.samuraijs.com/login\" target=\"_blank\" rel=\"noopener noreferrer\"> here</a>\r\n                </h5>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import Login from \"./Login\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginThunkCreator, getCaptchaThunkCreator } from \"../../redux/Auth-Reducer\";\r\nimport { AppStateType } from \"../../redux/store-redux\";\r\n\r\n\r\ntype MapStateType = {\r\n    isAuth: boolean,\r\n    captcha: string,\r\n    loading: boolean\r\n}\r\ntype MapDispatchType = {\r\n    loginThunk: (email: string, password: string, rememberMe: boolean, captcha: string) => void,\r\n    getCaptchaThunk: () => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateType => {\r\n    return {\r\n        isAuth: state.Auth.isAuth,\r\n        captcha: state.Auth.captcha,\r\n        loading: state.Auth.loading\r\n    }\r\n}\r\n\r\nexport const LoginContainer = connect<MapStateType, MapDispatchType, null, AppStateType>\r\n    (mapStateToProps, {\r\n        loginThunk: loginThunkCreator,\r\n        getCaptchaThunk: getCaptchaThunkCreator\r\n    })(Login)\r\n\r\n","import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport userPhoto from '../../assets/images/userPhoto.png'\r\nimport { DialogItemType } from '../../Types/DialogsTypes';\r\n\r\ntype PropsType = {\r\n    dialog: DialogItemType\r\n}\r\n\r\nconst Dialog: React.FC<PropsType> = (props) => {\r\n    let lastDataActivity = props.dialog.lastDialogActivityDate;\r\n    let lastDataActivShort = lastDataActivity.substr(0, lastDataActivity.length - 12)\r\n    return (\r\n        <div className='dialog'>\r\n            <NavLink to={`/messages/${props.dialog.id}`} className='black-text'>\r\n                <div className=\"row\">\r\n                    <div className=\"col xl1 l1 m2 s3\">\r\n                        <div>\r\n                            {!props.dialog.photos.small || !props.dialog.photos.large ?\r\n                                <img src={userPhoto} alt='' />\r\n                                :\r\n                                <img src={props.dialog.photos.small} alt='' /> || <img src={props.dialog.photos.large} alt='' />\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col xl11 l11 m10 s9\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col s6 left-align\">\r\n                                <h5>{props.dialog.userName}</h5>\r\n                                <p className='lastMessage'>Last message...</p>\r\n                            </div>\r\n                            <div className=\"col s6 right-align\">\r\n                                <p className='activity'>\r\n                                    {lastDataActivShort}<br />\r\n                                    {/* {props.dialog.lastUserActivityDate}<br /> */}\r\n                                </p>\r\n                                {props.dialog.newMessagesCount <= 0 ? '' :\r\n                                    <p className=\"newMessage\">\r\n                                        <span>\r\n                                            {props.dialog.newMessagesCount}\r\n                                        </span>\r\n                                    </p>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport Dialog from \"./Dialog\";\r\nimport Preloader from \"../../assets/preloader/Preloader\";\r\nimport { DialogItemType} from '../../Types/DialogsTypes';\r\n\r\ntype PropsType = {\r\n    listDialogs: DialogItemType[]\r\n    loading: boolean\r\n}\r\n\r\nconst Dialogs:React.FC<PropsType> = (props) => {\r\n    if (props.loading) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                {props.listDialogs.length === 0 ? <div>No dialogs</div> :\r\n                    props.listDialogs.map(dialog => <Dialog dialog={dialog} key={dialog.id} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import { DialogsAPI, ProfileAPI } from \"../Api/Api\";\r\nimport { InitialStateType, DialogItemType, MessageItemType } from \"../Types/DialogsTypes\";\r\nimport { AppStateType } from \"./store-redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { Dispatch } from \"redux\";\r\nconst SET_ALL_DIALOGS = 'SET_ALL_DIALOGS'\r\nconst SET_MESSAGES_WITH_FRIEND = 'SET_MESSAGES_WITH_FRIEND'\r\nconst SET_COUNT_NEW_MESSAGES = 'SET_COUNT_NEW_MESSAGES';\r\nconst SET_CURRENT_USER_IN_CHAT = 'SET_CURRENT_USER_IN_CHAT';\r\nconst SET_SUCCESS_LOADING = 'SET_SUCCESS_LOADING'\r\nconst SYNC_ALL_MESSAGES_TOOGLE = 'SYNC_ALL_MESSAGES_TOOGLE'\r\n\r\n\r\nlet initialState: InitialStateType = {\r\n    listDialogs: [],\r\n    messagesWithFriend: {\r\n        items: [],\r\n        totalCount: 0\r\n    },\r\n    countNesMessages: 0,\r\n    currentUserInChat: [],\r\n    loading: false,\r\n    syncingAllMessages: false\r\n}\r\n\r\nconst DialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_ALL_DIALOGS:\r\n            return {\r\n                ...state,\r\n                ...state.listDialogs,\r\n                listDialogs: action.allDialogs\r\n            }\r\n        case SET_MESSAGES_WITH_FRIEND:\r\n            return {\r\n                ...state,\r\n                messagesWithFriend: {\r\n                    ...state.messagesWithFriend,\r\n                    items: action.messages,\r\n                    totalCount: action.totalCount\r\n                },\r\n\r\n            }\r\n        case SET_COUNT_NEW_MESSAGES:\r\n            return {\r\n                ...state,\r\n                countNesMessages: action.countNesMessages\r\n            }\r\n        case SET_CURRENT_USER_IN_CHAT:\r\n            return {\r\n                ...state,\r\n                currentUserInChat: action.profile\r\n            }\r\n        case SET_SUCCESS_LOADING: {\r\n            return {\r\n                ...state,\r\n                loading: action.loading\r\n            }\r\n        }\r\n        case SYNC_ALL_MESSAGES_TOOGLE: {\r\n            return {\r\n                ...state,\r\n                syncingAllMessages: action.syncingAllMessages\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype ActionsType = SetAllDialogsACType | SetCountNewMessagesType | SetCurrentUserInChatACType |\r\n    SetMessagesListWithFriendACType | SetSuccessLoadingACType | SyncAllMessagesACType\r\n//actions creators\r\ntype SetAllDialogsACType = {\r\n    type: typeof SET_ALL_DIALOGS\r\n    allDialogs: DialogItemType[]\r\n}\r\nexport const setAllDialogsAC = (allDialogs: DialogItemType[]): SetAllDialogsACType => {\r\n    return {\r\n        type: SET_ALL_DIALOGS, allDialogs\r\n    }\r\n}\r\ntype SetCountNewMessagesType = {\r\n    type: typeof SET_COUNT_NEW_MESSAGES\r\n    countNesMessages: number\r\n}\r\nexport const setCountNewMessages = (countNesMessages: number): SetCountNewMessagesType => {\r\n    return {\r\n        type: SET_COUNT_NEW_MESSAGES, countNesMessages\r\n    }\r\n}\r\ntype SetCurrentUserInChatACType = {\r\n    type: typeof SET_CURRENT_USER_IN_CHAT\r\n    profile: object\r\n}\r\nexport const setCurrentUserInChatAC = (profile: object): SetCurrentUserInChatACType => {\r\n    return {\r\n        type: SET_CURRENT_USER_IN_CHAT, profile\r\n    }\r\n}\r\n\r\ntype SetMessagesListWithFriendACType = {\r\n    type: typeof SET_MESSAGES_WITH_FRIEND\r\n    messages: MessageItemType[]\r\n    totalCount: number\r\n}\r\nexport const setMessagesListWithFriendAC = (messages: MessageItemType[], totalCount: number):\r\n    SetMessagesListWithFriendACType => {\r\n    return {\r\n        type: SET_MESSAGES_WITH_FRIEND, messages, totalCount\r\n    }\r\n}\r\ntype SetSuccessLoadingACType = {\r\n    type: typeof SET_SUCCESS_LOADING\r\n    loading: boolean\r\n}\r\nexport const setSuccessLoadingAC = (loading: boolean): SetSuccessLoadingACType => {\r\n    return {\r\n        type: SET_SUCCESS_LOADING, loading\r\n    }\r\n}\r\ntype SyncAllMessagesACType = {\r\n    type: typeof SYNC_ALL_MESSAGES_TOOGLE\r\n    syncingAllMessages: boolean\r\n}\r\nexport const syncAllMessagesAC = (syncingAllMessages: boolean): SyncAllMessagesACType => {\r\n    return {\r\n        type: SYNC_ALL_MESSAGES_TOOGLE, syncingAllMessages\r\n    }\r\n}\r\n//thunks\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionsType>\r\ntype ThunkActionType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\nexport const startChattingThunkCreator = (userId: number): ThunkActionType => async (dispatch) => {\r\n    await DialogsAPI.startChatting(userId)\r\n}\r\n\r\nexport const getAllDialogsThunkCreator = (): ThunkActionType => async (dispatch) => {\r\n    dispatch(setSuccessLoadingAC(true));\r\n    let response = await DialogsAPI.getAllDialogs()\r\n    dispatch(setSuccessLoadingAC(false));\r\n    // console.log('getAllDialogs')\r\n    dispatch(setAllDialogsAC(response.data));\r\n    // console.log(response.data)\r\n}\r\n\r\n\r\nexport const getListMessagesWithFriendThunkCreator = (userId: number): ThunkActionType => async (dispatch) => {\r\n    dispatch(setSuccessLoadingAC(true));\r\n    let response = await DialogsAPI.getListMessagesWithFriend(userId)\r\n    dispatch(setMessagesListWithFriendAC(response.data.items, response.data.totalCount));\r\n    let secondResponse = await ProfileAPI.getProfile(userId)\r\n    dispatch(setCurrentUserInChatAC(secondResponse.data))\r\n    Promise.all([response, secondResponse]).then(values => {\r\n        dispatch(setSuccessLoadingAC(false));\r\n    })\r\n}\r\n\r\nexport const syncMessagesWithFrinedThunkCreator = (userId: number): ThunkActionType => async (dispatch, getState) => {\r\n    const syncingAllMessages = getState().dialogs.syncingAllMessages;\r\n    if (syncingAllMessages) {\r\n        console.log('syncingAllMessages:', userId)\r\n        let response = await DialogsAPI.returnMessageThanDate(userId, '2020.01.01');\r\n        dispatch(setMessagesListWithFriendAC(response.data, response.data.length));\r\n    } else {\r\n        await DialogsAPI.getListMessagesWithFriend(userId).then((response: any) => {\r\n            dispatch(setMessagesListWithFriendAC(response.data.items, response.data.totalCount));\r\n            // console.log('getListMessagesWithFriend');\r\n            // console.log(response.data)\r\n            console.log('sync: User:', userId);\r\n        })\r\n    }\r\n}\r\n\r\nexport const sendMessageToFriendThunkCreator = (userId: number, newMessage: string): ThunkActionType => async (dispatch) => {\r\n    await DialogsAPI.sendMessageToFriend(userId, newMessage)\r\n    await DialogsAPI.getListMessagesWithFriend(userId).then((response: any) => {\r\n        dispatch(setMessagesListWithFriendAC(response.data.items, response.data.totalCount));\r\n        // console.log('getListMessagesWithFriend');\r\n        // console.log(response.data)\r\n    })\r\n}\r\n\r\nexport const getListNewMessagesThunkCreator = (userId: number): ThunkActionType => async (dispatch) => {\r\n    let response = await DialogsAPI.listNewMessage();\r\n    dispatch(setCountNewMessages(response.data))\r\n    // console.log('getListNewMessages');\r\n    // console.log(response.data)\r\n}\r\ntype ReponseGetReturnMessageDateThunkCreatorType = {\r\n    response: {}\r\n    data: MessageItemType[]\r\n    totalCount: number | null\r\n}\r\n\r\nexport const getReturnMessageDateThunkCreator = (userId: number, date: string): ThunkActionType => async (dispatch) => {\r\n    let response = await DialogsAPI.returnMessageThanDate(userId, date);\r\n    dispatch(setMessagesListWithFriendAC(response.data, response.data.length));\r\n    dispatch(syncAllMessagesAC(true))\r\n}\r\n\r\nexport const DeleteMessageTC = (messageId: string, userId: number): ThunkActionType => async (dispatch) => {\r\n    await DialogsAPI.deleteMessage(messageId);\r\n    console.log('the message was deleted')\r\n    await DialogsAPI.getListMessagesWithFriend(userId).then((response: any) => {\r\n        dispatch(setMessagesListWithFriendAC(response.data.items, response.data.totalCount));\r\n        // console.log('getListMessagesWithFriend');\r\n        // console.log(response.data)\r\n    })\r\n}\r\n\r\n\r\n\r\nexport default DialogsReducer;","import React, { useEffect } from 'react';\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    getAllDialogsThunkCreator\r\n} from \"../../redux/Dialogs-Reducer\";\r\nimport { compose } from \"redux\";\r\nimport { Redirect, withRouter } from \"react-router-dom\";\r\nimport { DialogItemType } from '../../Types/DialogsTypes';\r\nimport { AppStateType } from '../../redux/store-redux';\r\n\r\ntype MapStatePropsType = {\r\n    listDialogs: DialogItemType[],\r\n    id: number | null,\r\n    loading: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getAllDialogsThunk: () => void\r\n}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst DialogsContainer: React.FC<PropsType> = (props) => {\r\n    useEffect(() => {\r\n        props.getAllDialogsThunk();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n    if (!props.id) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n    return (\r\n        <Dialogs listDialogs={props.listDialogs} loading={props.loading} />\r\n    )\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        listDialogs: state.dialogs.listDialogs,\r\n        id: state.Auth.id,\r\n        loading: state.dialogs.loading\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect<MapStatePropsType, MapDispatchPropsType, null, AppStateType>\r\n        (mapStateToProps, { getAllDialogsThunk: getAllDialogsThunkCreator })\r\n)(DialogsContainer)\r\n","import React from 'react';\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport s from './MessagesForm.module.css'\r\n\r\n\r\nconst MessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.container}>\r\n            <div className=\"row p10\">\r\n                <div className=\"col s1\"></div>\r\n                <div className=\"col xl10 m9 l9 s9\">\r\n                    <Field name='newMessage' placeholder='Write a message' component='textarea' className=\"message-textarea\" />\r\n                </div>\r\n                <div className=\"col xl1 m2 l2 s2 center-align\">\r\n                    <button className='btn-Medium transparent sendMessage pt25'>\r\n                        <i className=\"Medium material-icons black-text\">send</i>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ReduxMessageForm = reduxForm({ form: 'Message' })(MessageForm)\r\n\r\n","import React from 'react';\r\nimport s from \"./Dialogs.module.css\";\r\nimport { ReduxMessageForm } from \"./MessageForm\";\r\nimport userPhoto from './../../assets/images/userPhoto.png'\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { CurrentUserType, MessageItemType } from \"./../../Types/DialogsTypes\"\r\nimport Preloader from '../../assets/preloader/Preloader';\r\n\r\n\r\n\r\ntype PropsType = {\r\n    userId: number\r\n    sendMessageToFriendThunk: (userId: number, newMessage: string | null) => void\r\n    currentUserInChat: CurrentUserType | {} | any\r\n    authUserPhoto: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n    messagesWithFriend: {\r\n        items: MessageItemType[],\r\n        totalCount: number | null\r\n    };\r\n    getReturnMessageDateThunk: (userId: number, date: string) => void\r\n    loading: boolean\r\n    DeleteMessageTC: (messageId: string, userId: number) => void\r\n}\r\n\r\nconst Messages: React.FC<PropsType> = (props) => {\r\n    let userId = props.userId;\r\n    //problems with the typing of the form data\r\n    let onTextInMessage = (formData: any) => {\r\n        props.sendMessageToFriendThunk(userId, formData.newMessage)\r\n    }\r\n\r\n    const regEx = /[^\\d:]/g;\r\n    const addedAt = (date: string) => {\r\n        let format = date.substr(date.length - 12)\r\n        let result = format.replace(regEx, '')\r\n        return result.split(':')[0] + ':' + result.split(':')[1];\r\n    }\r\n\r\n    //take current user photo\r\n\r\n    let getCurrentUserPhoto = !props.currentUserInChat.photos ? ' ' :\r\n        !props.currentUserInChat.photos.large || !props.currentUserInChat.photos.small ?\r\n            <img src={userPhoto} alt={''} /> : <img src={props.currentUserInChat.photos.large} alt={''} />;\r\n    //take auth profile photo\r\n    let getUserPhoto = !props.authUserPhoto.small || !props.authUserPhoto.large ? ' ' :\r\n        <img src={props.authUserPhoto.small} alt={''} /> || <img src={props.authUserPhoto.large} alt={''} />\r\n\r\n    const confirmmDeletingMessage = (id: string, userId: number) => {\r\n        let isConfirm = window.confirm(`delete a message?`);\r\n        if (isConfirm) {\r\n            props.DeleteMessageTC(id, userId)\r\n        }\r\n    }\r\n    let alignMessage = (senderId: number) => {\r\n        if(props.currentUserInChat.userId === senderId){\r\n            return ' ' + s.leftAlignMessage\r\n        }else{\r\n            return ' ' + s.rightAlignMessage\r\n        }\r\n    }\r\n    if (props.loading) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div className=\"message__main container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s12\">\r\n                    <div className={s.messagesContain}>\r\n                        {!props.currentUserInChat ? '' :\r\n                            <div className={s.chatTittle}>\r\n                                <h3 className='left-align'>\r\n                                    <NavLink to='/Dialogs'>\r\n                                        Back\r\n                                    </NavLink>\r\n                                </h3>\r\n                                <h3 className='center-align'>{props.currentUserInChat.fullName}</h3>\r\n                                <NavLink to={'/profile/' + userId}>\r\n                                    {getCurrentUserPhoto}\r\n                                </NavLink>\r\n                            </div>\r\n                        }\r\n                        <div className={s.mainChatBlock}>\r\n                            <div className={s.chatBody}>\r\n                                {props.messagesWithFriend.items.length >= 10 &&\r\n                                    <button className={s.past__messages} onClick={() => {\r\n                                        props.getReturnMessageDateThunk(props.currentUserInChat.userId, '2020.01.01')\r\n                                    }}>\r\n                                        Past messages\r\n                                    </button>\r\n                                }\r\n                                {props.messagesWithFriend.items.length === 0 ? 'You don\\'t have messages with this user' :\r\n                                    props.messagesWithFriend.items.map(m => <div key={m.id} className={m.viewed === true ?\r\n                                        s.messagesWithFriendId + alignMessage(m.senderId) : s.notViewedMessage + alignMessage(m.senderId)}\r\n                                        onClick={() => { confirmmDeletingMessage(m.id, props.currentUserInChat.userId) }}>\r\n                                        <div className={s.main__img__username}>\r\n                                            {m.senderId === Number(userId) ?\r\n                                                getCurrentUserPhoto\r\n                                                :\r\n                                                getUserPhoto\r\n                                            }\r\n                                            <h4>{m.senderName}</h4>\r\n                                            <div className={s.dateAdded}>{addedAt(m.addedAt)}</div>\r\n                                        </div>\r\n                                        {/*<div>Id: {m.id}</div>*/}\r\n                                        {/*check read message*/}\r\n                                        {/*<div>SenderId: {m.senderId}</div>*/}\r\n                                        {/*<div>recipientId: {m.recipientId}</div>*/}\r\n                                        <div className={s.chatText}>{m.body}</div>\r\n                                    </div>)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <ReduxMessageForm onSubmit={onTextInMessage} />\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messages;","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    getListMessagesWithFriendThunkCreator, getReturnMessageDateThunkCreator, sendMessageToFriendThunkCreator,\r\n    syncMessagesWithFrinedThunkCreator, DeleteMessageTC\r\n} from \"../../redux/Dialogs-Reducer\";\r\nimport { compose } from \"redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Messages from \"./Messages\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport { AppStateType } from '../../redux/store-redux';\r\nimport { MessageItemType, CurrentUserType } from '../../Types/DialogsTypes';\r\n\r\ntype MapStateType = {\r\n    id: number | null\r\n    messagesWithFriend: {\r\n        items: MessageItemType[],\r\n        totalCount: number | null\r\n    }\r\n    currentUserInChat: CurrentUserType | {}\r\n    authUserPhoto: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n    loading: boolean\r\n}\r\ntype MapDispatchType = {\r\n    getListMessagesWithFriendThunk: (userId: number) => void\r\n    SyncInterval: (userId: number) => void\r\n    ClearIntreval: () => void\r\n    sendMessageToFriendThunk: (userId: number, newMessage: string | null) => void\r\n    getReturnMessageDateThunk: (userId: number, date: string) => void\r\n    DeleteMessageTC: (messageId: string,userId: number) => void\r\n}\r\ntype WithRouterType = {\r\n    match:{\r\n        params:{\r\n            userId: number\r\n        }\r\n    }\r\n}\r\ntype PropsType = MapStateType & MapDispatchType & WithRouterType\r\n\r\nclass MessagesContainer extends React.Component<PropsType> {\r\n    constructor(props:PropsType) {\r\n        super(props);\r\n        this.state = { load: false };\r\n    }\r\n    componentDidMount() {\r\n        this.props.getListMessagesWithFriendThunk(this.props.match.params.userId);\r\n    }\r\n\r\n    componentDidUpdate(prevProps:PropsType) {\r\n        this.props.ClearIntreval();\r\n        if (prevProps.match.params.userId !== this.props.match.params.userId) {\r\n            this.props.getListMessagesWithFriendThunk(this.props.match.params.userId);\r\n            this.props.ClearIntreval();\r\n        } else if (prevProps.match.params.userId === this.props.match.params.userId) {\r\n            this.props.SyncInterval(this.props.match.params.userId);\r\n        }\r\n    }\r\n    render() {\r\n        if(!this.props.id){\r\n            return <Redirect to={'/login'}/>\r\n        }\r\n        return (\r\n            <Messages userId={this.props.match.params.userId} \r\n            sendMessageToFriendThunk={this.props.sendMessageToFriendThunk} \r\n            currentUserInChat={this.props.currentUserInChat}\r\n            authUserPhoto={this.props.authUserPhoto}\r\n            messagesWithFriend={this.props.messagesWithFriend}\r\n            getReturnMessageDateThunk={this.props.getReturnMessageDateThunk}\r\n            loading={this.props.loading}\r\n            DeleteMessageTC={this.props.DeleteMessageTC}\r\n            />\r\n        )\r\n    }\r\n}\r\nlet mapStateToProps = (state: AppStateType):MapStateType => {\r\n    return {\r\n        messagesWithFriend: state.dialogs.messagesWithFriend,\r\n        currentUserInChat: state.dialogs.currentUserInChat,\r\n        authUserPhoto: state.app.userPhoto,\r\n        id: state.Auth.id,\r\n        loading: state.dialogs.loading,\r\n    }\r\n}\r\n//<MapStateType,MapDispatchType,null,AppStateType>\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {\r\n        getListMessagesWithFriendThunk: getListMessagesWithFriendThunkCreator,\r\n        sendMessageToFriendThunk: sendMessageToFriendThunkCreator,\r\n        getReturnMessageDateThunk: getReturnMessageDateThunkCreator,\r\n        syncMessagesWithFrinedThunk: syncMessagesWithFrinedThunkCreator,\r\n        DeleteMessageTC\r\n    })\r\n)(MessagesContainer)\r\n","import React from 'react';\r\nimport s from './GlobalErrors.module.css'\r\n\r\n\r\ntype StateType = {\r\n    globalErrors: null | string\r\n}\r\ntype PromiseRejectionType = {\r\n    reason: {\r\n        message: string;\r\n        request: {\r\n            response: string;\r\n        }\r\n    } | string\r\n}\r\n//<{}> because props are empty, only read\r\nclass GlobalErrors extends React.Component<{}, StateType> {\r\n    constructor(props: Readonly<{}>) {\r\n        super(props);\r\n        this.state = { globalErrors: null };\r\n    }\r\n    catchAllUnhandelErrors = (promiseRejectionEvent: PromiseRejectionType) => {\r\n        // alert(promiseRejectionEvent.reason.message);\r\n        console.log(promiseRejectionEvent)\r\n        if (typeof (promiseRejectionEvent.reason) === \"object\") {\r\n            this.setState({\r\n                globalErrors: promiseRejectionEvent.reason.message +\r\n                    '(' + promiseRejectionEvent.reason.request.response + ')'\r\n            })\r\n        } if (typeof (promiseRejectionEvent.reason) === \"string\") {\r\n            this.setState({\r\n                globalErrors: promiseRejectionEvent.reason\r\n            })\r\n        }\r\n        setTimeout(() =>\r\n            this.setState({\r\n                globalErrors: null\r\n            })\r\n            , 5000)\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandelErrors)\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.globalErrors ?\r\n                    <div className={s.error_window}>\r\n                        {this.state.globalErrors}\r\n                    </div>\r\n                    :\r\n                    ''\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GlobalErrors","import React, { Suspense } from 'react';\r\nimport './App.css';\r\nimport { Route } from \"react-router\";\r\nimport ProfileContainer from \"./Components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./Components/Header/HeaderContainer\";\r\nimport Home from './Components/Home/Home';\r\nimport { LoginContainer } from \"./Components/Login/LoginContainer\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { initiliazedThunkCreator } from \"./redux/App-Reducer\";\r\nimport Preloader from \"./assets/preloader/Preloader\";\r\nimport DialogsContainer from \"./Components/Dialogs/DialogsContainer\";\r\nimport MessagesContainer from './Components/Dialogs/MessagesContainer';\r\nimport GlobalErrors from './Components/GlobalErrors/GlobalErrors';\r\nimport { syncMessagesWithFrinedThunkCreator, syncAllMessagesAC } from './redux/Dialogs-Reducer';\r\nimport { Redirect } from \"react-router-dom\"\r\n//import UsersContainer from \"./Components/Users/UsersContainer\";\r\nconst UsersContainer = React.lazy(() => import('./Components/Users/UsersContainer'));\r\n\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.props.initiliazedThunk();\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.location.pathname !== this.props.location.pathname) {\r\n            this.ClearIntreval();\r\n            this.props.syncAllMessagesAC(false);\r\n        }\r\n    }\r\n    //sync message\r\n    SyncInterval(userIdi) {\r\n        this.timerID = setInterval(() =>\r\n            this.props.syncMessagesWithFrinedThunk(userIdi), 5000);\r\n    }\r\n    ClearIntreval() { return clearInterval(this.timerID) };\r\n    //end\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader />\r\n        }\r\n        return (\r\n            <div className=\"App\">\r\n                <GlobalErrors />\r\n                <HeaderContainer />\r\n                <Route exact path='/' render={() => (<Home/>)}/>\r\n                <div className='container'>\r\n                    <div className='row'>\r\n                        <div className='col s12'>\r\n                            <Route\r\n                                path='/Users'\r\n                                render={() => {\r\n                                    return <Suspense fallback={<Preloader />}>\r\n                                        <UsersContainer />\r\n                                    </Suspense>\r\n                                }\r\n                                } />\r\n                            <Route exact path='/profile/:userId?' render={() => <ProfileContainer />} />\r\n                            <Route path='/Login' render={() => <LoginContainer />} />\r\n                            <Route path='/Dialogs' render={() => this.props.id ? <DialogsContainer /> : <Redirect to='/Login' />} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"container-fluid fluidToMobile\">\r\n                    <Route path='/messages/:userId?' render={() => this.props.id ?\r\n                        <MessagesContainer SyncInterval={this.SyncInterval.bind(this)}\r\n                            ClearIntreval={this.ClearIntreval.bind(this)}\r\n                        /> : <Redirect to='/Login' />} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    initialized: state.app.initialized,\r\n    id: state.Auth.id\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        initiliazedThunk: initiliazedThunkCreator,\r\n        syncMessagesWithFrinedThunk: syncMessagesWithFrinedThunkCreator,\r\n        syncAllMessagesAC\r\n    }),\r\n    withRouter\r\n)(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport UsersPageReducer from \"./UsersPage-Reducer\";\r\nimport profilePageReducer from \"./ProfilePage-Reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport DialogsReducer from \"./Dialogs-Reducer\";\r\nimport { appReducer } from \"./App-Reducer\";\r\nimport authReducer from \"./Auth-Reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    userPage: UsersPageReducer,\r\n    profilePage: profilePageReducer,\r\n    Auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n    dialogs: DialogsReducer\r\n})\r\n\r\n//\r\ntype RootReducerType = typeof reducers;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n//Более глобальный просмотр стейта\r\n\r\n\r\n//extension\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers,composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n// let store = createStore(reducers,applyMiddleware(thunkMiddleware));\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from \"./redux/store-redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport 'materialize-css';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n\r\n\r\n// basename={process.env.PUBLIC_URL}\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider\r\n            store={store} >\r\n            <App />\r\n        </Provider>\r\n    </HashRouter>\r\n    , document.getElementById('root')\r\n);\r\n\r\n//Убрали наш render() так как connect решает эту проблему сам\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"uploadPhoto\":\"Profile_uploadPhoto__1w7BM\",\"infoProfile\":\"Profile_infoProfile__3wEpn\",\"avatarBlock\":\"Profile_avatarBlock__3k36m\",\"editButton\":\"Profile_editButton__GVymE\",\"saveButton\":\"Profile_saveButton__1oKF8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FormControl\":\"FormsControls_FormControl__3XUG6\",\"error\":\"FormsControls_error__31zwi\",\"someError\":\"FormsControls_someError__tUkev\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__1d8jL\",\"active\":\"Sidebar_active__k5yIA\",\"loginButton\":\"Sidebar_loginButton__3PQwb\"};","module.exports = __webpack_public_path__ + \"static/media/userPhoto.a8d8ecba.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginButton\":\"Header_loginButton__Q1J-R\",\"cursor\":\"Header_cursor__2eSNY\",\"userPhoto\":\"Header_userPhoto__33kPu\",\"userlink\":\"Header_userlink__2fFiY\"};","import axios from \"axios\";\r\nimport { ProfileType } from \"../Types/ProfileTypes\";\r\nimport { UserType } from \"../Types/UsersTypes\";\r\nimport { DialogItemType, MessageItemType } from \"../Types/DialogsTypes\";\r\n//создаем образец, чтобы не дублировать код\r\nlet instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"a6c20467-1a5b-406b-88d2-a8a4879b1b99\"\r\n    }\r\n})\r\n\r\ntype GetUsersResponseType = {\r\n    items: UserType[]\r\n    totalCount: number\r\n    error: string\r\n}\r\n//группировка методов\r\nexport const UsersAPI = {\r\n    getUsers(pageSize: number, pageNumber: number) {\r\n        return instance.get<GetUsersResponseType>(`users?count=${pageSize}&page=${pageNumber}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getUsersTerm(pageSize: number, text: string) {\r\n        return instance.get<GetUsersResponseType>(`users?count=${pageSize}&page=1&term=${text}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}\r\n\r\ntype UpdateProfileRespType = {\r\n    resultCode: number\r\n    messages: Array<string>,\r\n    data: {}\r\n}\r\ntype UpdatePhotoRespType = {\r\n    data: {\r\n        photos: {\r\n            small: string,\r\n            large: string\r\n        }\r\n    }\r\n    messages: Array<string>\r\n    resultCode: number\r\n}\r\n\r\nexport const ProfileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`/profile/status/` + userId);\r\n    },\r\n    updateStatus(newStatus: string) {\r\n        return instance.put<UpdateProfileRespType>(`/profile/status`, { status: newStatus })\r\n    },\r\n    updateProfile(profile: ProfileType) {\r\n        return instance.put<UpdateProfileRespType>(`/profile`, profile)\r\n    },\r\n    uploadPhoto(photos: any) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photos);\r\n        return instance.put<UpdatePhotoRespType>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const FollowAPI = {\r\n    followUser(id: number) {\r\n        return instance.post<boolean>(`follow/${id}`, {})\r\n    },\r\n    unfollowUser(id: number) {\r\n        return instance.delete<boolean>(`follow/${id}`, {})\r\n    }\r\n}\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n    CaptchaIsRequired = 10\r\n}\r\ntype MeResponseType = {\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>,\r\n    data: {\r\n        id: number,\r\n        email: string,\r\n        login: string\r\n    }\r\n}\r\ntype LoginResponseType = {\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>,\r\n    data: {\r\n        userId: number\r\n    }\r\n}\r\ntype LogoutResponseType = {\r\n    resultCode: number\r\n    messages: Array<string>,\r\n    data: {}\r\n}\r\n\r\nexport const meAPI = {\r\n    me() {\r\n        return instance.get<MeResponseType>(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: string | null = null) {\r\n        return instance.post<LoginResponseType>(`auth/login`, { email, password, rememberMe, captcha })\r\n    },\r\n    logout() {\r\n        return instance.delete<LogoutResponseType>(`auth/login`)\r\n    }\r\n}\r\ntype GetCaptchaRespType = {\r\n    url: string\r\n}\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return instance.get<GetCaptchaRespType>(`security/get-captcha-url`)\r\n    }\r\n}\r\ntype GetListMessagesWithFriendRespType = {\r\n    items: MessageItemType[],\r\n    totalCount: number\r\n}\r\ntype SendMessageRespType = {\r\n    data: {\r\n        message: MessageItemType[]\r\n    }\r\n    messages: Array<string>\r\n    resultCode: number\r\n}\r\n\r\nexport const DialogsAPI = {\r\n    startChatting(userId: number) {\r\n        return instance.put(`dialogs/${userId}`)\r\n    },\r\n    getAllDialogs() {\r\n        return instance.get<DialogItemType[]>(`dialogs`)\r\n    },\r\n    getListMessagesWithFriend(userId: number) {\r\n        return instance.get<GetListMessagesWithFriendRespType>(`dialogs/${userId}/messages`)\r\n    },\r\n    sendMessageToFriend(userId: number, newMessage: string) {\r\n        return instance.post<SendMessageRespType>(`dialogs/${userId}/messages`, { body: newMessage })\r\n    },\r\n    isViewedYourMessage(messageId: any) {\r\n        return instance.get(`dialogs/messages/${messageId}/viewed`)\r\n    },\r\n    messageInSpam(messageId: any) {\r\n        return instance.post(`dialogs/messages/${messageId}/spam`)\r\n    },\r\n    deleteMessage(messageId: string) {\r\n        return instance.delete(`dialogs/messages/${messageId}`)\r\n    },\r\n    restoreMessage(messageId: any) {\r\n        return instance.put(`dialogs/messages/${messageId}/restore`)\r\n    },\r\n    returnMessageThanDate(userId: number, date: string) {\r\n        return instance.get<MessageItemType[]>(`dialogs/${userId}/messages/new?newerThen=${date}`)\r\n    },\r\n    listNewMessage() {\r\n        return instance.get(`dialogs/messages/new/count`)\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"preloader_preloader__3FzbP\",\"preloadContain\":\"preloader_preloadContain__24KhO\"};"],"sourceRoot":""}