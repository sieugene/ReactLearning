{"version":3,"sources":["redux/UsersPage-Reducer.js","assets/preloader/preloader.svg","assets/images/post2.jpg","Components/GlobalErrors/GlobalErrors.module.css","Components/Sidebar/Sidebar.module.css","Components/Dialogs/Dialogs.module.css","assets/FormControl/FormsControls.jsx","Components/Profile/ProfileDataForm.jsx","Components/Profile/ProfileStatusWithHooks.jsx","Components/Profile/ProfileData.jsx","Components/Profile/Profile.jsx","redux/ProfilePage-Reducer.js","Components/Profile/ProfileContainer.jsx","Components/Sidebar/SIdebar.jsx","Components/Header/DropDownNavbar.js","Components/Header/Header.jsx","redux/Auth-Reducer.ts","redux/App-Reducer.ts","Components/Header/HeaderContainer.jsx","Components/Home/Home.jsx","Components/utils/validators/validators.js","Components/Login/Login.jsx","Components/Login/LoginContainer.jsx","Components/SecondSidebar/SecondSidebar.jsx","Components/Dialogs/Dialog.jsx","Components/Dialogs/Dialogs.jsx","redux/Dialogs-Reducer.ts","Components/Dialogs/DialogsContainer.jsx","Components/Dialogs/MessageForm.js","Components/Dialogs/Messages.jsx","Components/Dialogs/MessagesContainer.jsx","Components/GlobalErrors/GlobalErrors.js","App.js","serviceWorker.js","redux/store-redux.js","index.js","assets/preloader/Preloader.jsx","Components/Profile/Profile.module.css","assets/FormControl/FormsControls.module.css","assets/images/userPhoto.png","Components/Header/Header.module.css","assets/preloader/preloader.module.css","Api/Api.js"],"names":["initialState","UsersList","pageSize","totalUsers","currentPage","searchTerm","isFetching","followingInProgress","followAC","userId","type","unFollowAC","setUsersAC","setUsersTotalCount","setSearchTermAC","text","toggleIsFetchingAC","toggleFollowingInProgressAC","getUsersThunkCreator","dispatch","a","UsersAPI","getUsers","response","items","totalCount","setCurrentPageThunkCreator","pageNumber","setSearchTermTextThunkCreator","getUsersTerm","followUnfollowFlow","methoApi","action","unFollowUserThunkCreator","FollowAPI","unfollowUser","followUserThunkCreator","followUser","UsersPageReducer","state","map","u","id","followed","filter","module","exports","InputMessage","input","meta","props","activeError","touched","error","s","className","FormControl","InputAuth","Contact","contactTitle","contactBody","href","target","rel","Field","placeholder","name","component","ReduxEditProfile","reduxForm","form","infoProfile","onSubmit","handleSubmit","someError","Object","keys","profile","contacts","key","ProfileStatusWithHooks","React","memo","useState","editMode","setEditMode","status","setStatus","activateEditMode","deactivateEditMode","updateStatusUserThunk","onChangeTextStatus","e","currentTarget","value","useEffect","Number","urlMatchParams","onChange","autoFocus","onBlur","onDoubleClick","data-tooltip","ProfileData","editButton","onClick","setEditProfile","aboutMe","fullName","lookingForAJob","lookingForAJobDescription","Profile","Preloader","editProfile","profileContain","loading","avatarBlock","src","photos","small","large","userPhoto","alt","files","length","uploadNewPhotoThunk","htmlFor","uploadPhoto","initialValues","formData","updateProfileUserThunk","then","setUserProfileAC","setStatusUserAC","uploadNewPhotoAC","setLoadingAC","getProfileThunkCreator","ProfileAPI","getProfile","data","profilePageReducer","ProfileContainer","this","getProfileThunk","setStatusUserThunk","match","params","updateProfile","prevProps","prevState","snapshot","path","to","Component","compose","connect","profilePage","Auth","setUser","getStatus","newStatus","updateStatus","resultCode","alert","getState","messageError","messages","stopSubmit","_error","Promise","reject","withRouter","Sidebar","sidebar","isAuth","activeClassName","active","logoutThunk","loginButton","DropDownNavbar","addClassForToggle","toggle","Header","cursor","dropDownToogle","login","userlink","email","captcha","setAuthUserAC","toogleLoadingAC","authMeThunkCreator","meAPI","me","getCaptchaThunkCreator","securityAPI","getCaptcha","url","authReducer","initialized","initializedUserPhotoAC","HeaderContainer","setState","initiliazedUserPhotoThunk","location","pathname","bind","app","logout","promise","Home","img","style","post2","backgroundImage","height","backgroundSize","backgroundRepeat","width","backgroundPosition","required","ReduxLoginForm","validate","Login","loginThunk","password","rememberMe","LoginContainer","getCaptchaThunk","SecondSidebar","Dialog","lastDataActivity","dialog","lastDialogActivityDate","lastDataActivShort","substr","userName","newMessagesCount","Dialogs","listDialogs","messagesWithFriend","countNesMessages","currentUserInChat","setMessagesListWithFriendAC","setSuccessLoadingAC","getListMessagesWithFriendThunkCreator","DialogsAPI","getListMessagesWithFriend","all","values","syncMessagesWithFrinedThunkCreator","console","log","sendMessageToFriendThunkCreator","newMessage","sendMessageToFriend","DialogsReducer","allDialogs","dialogs","startChattingThunk","startChatting","getAllDialogsThunk","getAllDialogs","getListMessagesWithFriendThunk","sendMessageToFriendThunk","getListNewMessagesThunk","listNewMessage","ReduxMessageForm","container","Messages","regEx","getCurrentUserPhoto","getUserPhoto","authUserPhoto","messagesContain","chatTittle","mainChatBlock","chatBody","past__messages","getReturnMessageDateThunk","m","viewed","messagesWithFriendId","notViewedMessage","main__img__username","senderId","senderName","dateAdded","date","result","replace","split","addedAt","chatText","body","MessagesContainer","load","ClearIntreval","SyncInterval","returnMessageThanDate","syncMessagesWithFrinedThunk","GlobalErrors","catchAllUnhandelErrors","promiseRejectionEvent","globalErrors","reason","message","request","setTimeout","window","addEventListener","error_window","UsersContainer","lazy","App","initiliazedThunk","userIdi","timerID","setInterval","clearInterval","exact","render","fallback","Boolean","hostname","reducers","combineReducers","userPage","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","preloadContain","preloadImg","preloader","instance","axios","withCredentials","baseURL","headers","get","put","FormData","append","post","delete","isViewedYourMessage","messageId","messageInSpam","deleteMessage","restoreMessage"],"mappings":"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","file":"static/js/main.0b9e55e4.chunk.js","sourcesContent":["import {FollowAPI, UsersAPI} from \"../Api/Api\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_USERS_TOTAL_COUNT = 'SET_USERS_TOTAL_COUNT';\r\nconst SET_SEARCH_TERM = 'SET_SEARCH_TERM';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_FOLLOWING_PROGRESS = 'TOGGLE_FOLLOWING_PROGRESS'\r\n\r\n\r\nlet initialState = {\r\n    UsersList: [],\r\n    pageSize: 15,\r\n    totalUsers: 0,\r\n    currentPage: 1,\r\n    searchTerm: '',\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\nconst UsersPageReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                UsersList: state.UsersList.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                UsersList: state.UsersList.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                UsersList: action.UsersList,\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case SET_USERS_TOTAL_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsers: action.totalUsers\r\n            }\r\n        case SET_SEARCH_TERM:\r\n            return {\r\n                ...state,\r\n                searchTerm: action.text\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.userId]\r\n                    :\r\n                    state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const followAC = (userId) => {\r\n    return {\r\n        type: FOLLOW, userId\r\n    }\r\n}\r\nexport const unFollowAC = (userId) => {\r\n    return {\r\n        type: UNFOLLOW, userId\r\n    }\r\n}\r\nexport const setUsersAC = (UsersList) => {\r\n    return {\r\n        type: SET_USERS, UsersList\r\n    }\r\n}\r\nexport const setCurrentPageAC = (currentPage) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE, currentPage\r\n    }\r\n}\r\nexport const setUsersTotalCount = (totalUsers) => {\r\n    return {\r\n        type: SET_USERS_TOTAL_COUNT, totalUsers\r\n    }\r\n}\r\nexport const setSearchTermAC = (text) => {\r\n    return {\r\n        type: SET_SEARCH_TERM, text\r\n    }\r\n}\r\nexport const toggleIsFetchingAC = (isFetching) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING, isFetching\r\n    }\r\n}\r\nexport const toggleFollowingInProgressAC = (isFetching, userId) => {\r\n    return {\r\n        type: TOGGLE_FOLLOWING_PROGRESS,\r\n        isFetching, userId\r\n    }\r\n}\r\n\r\nexport const getUsersThunkCreator = (pageSize, currentPage) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetchingAC(true));\r\n        let response = await UsersAPI.getUsers(pageSize, currentPage)\r\n        dispatch(toggleIsFetchingAC(false));\r\n        dispatch(setUsersAC(response.items));\r\n        dispatch(setUsersTotalCount(response.totalCount));\r\n    }\r\n}\r\n\r\nexport const setCurrentPageThunkCreator = (pageSize, pageNumber) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetchingAC(true));\r\n        dispatch(setCurrentPageAC(pageNumber));\r\n        let response = await UsersAPI.getUsers(pageSize, pageNumber)\r\n        dispatch(toggleIsFetchingAC(false));\r\n        dispatch(setUsersAC(response.items));\r\n        dispatch(setUsersTotalCount(response.totalCount));\r\n    }\r\n}\r\n\r\nexport const setSearchTermTextThunkCreator = (pageSize, text) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetchingAC(true));\r\n        dispatch(setSearchTermAC(text));\r\n        if(!text){\r\n            text = ' ';\r\n        }\r\n        let response = await UsersAPI.getUsersTerm(pageSize, text)\r\n        dispatch(toggleIsFetchingAC(false));\r\n        dispatch(setUsersAC(response.items));\r\n        dispatch(setUsersTotalCount(response.totalCount));\r\n    }\r\n}\r\n\r\n\r\nconst followUnfollowFlow = async (dispatch, userId, methoApi, action) => {\r\n    dispatch(toggleFollowingInProgressAC(true, userId))\r\n    await methoApi(userId)\r\n    dispatch(action(userId));\r\n    dispatch(toggleFollowingInProgressAC(false, userId));\r\n}\r\n\r\n\r\nexport const unFollowUserThunkCreator = (userId) => (dispatch) => {\r\n    return followUnfollowFlow(dispatch, userId, FollowAPI.unfollowUser, unFollowAC)\r\n}\r\n\r\n\r\nexport const followUserThunkCreator = (userId) => (dispatch) => {\r\n    return followUnfollowFlow(dispatch, userId, FollowAPI.followUser, followAC)\r\n}\r\n\r\n\r\nexport default UsersPageReducer;","module.exports = __webpack_public_path__ + \"static/media/preloader.03527c20.svg\";","module.exports = __webpack_public_path__ + \"static/media/post2.44d32f35.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error_window\":\"GlobalErrors_error_window__AJulT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__1k2CN\",\"active\":\"Sidebar_active__M0-Ej\",\"loginButton\":\"Sidebar_loginButton__mtp_z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerDialog\":\"Dialogs_containerDialog__3Vbal\",\"listDialogs\":\"Dialogs_listDialogs__19fS5\",\"dialogUser\":\"Dialogs_dialogUser__22E2c\",\"userNameWithImg\":\"Dialogs_userNameWithImg__MjVFY\",\"messagesContain\":\"Dialogs_messagesContain__OC50C\",\"NotViews\":\"Dialogs_NotViews__1RKFo\",\"messagesWithFriendId\":\"Dialogs_messagesWithFriendId__93Jwe\",\"dialog\":\"Dialogs_dialog__3kBaR\",\"notViewedMessage\":\"Dialogs_notViewedMessage__1_mXW\",\"main__img__username\":\"Dialogs_main__img__username__35j4I\",\"dateAdded\":\"Dialogs_dateAdded__15bT1\",\"chatText\":\"Dialogs_chatText__2f55I\",\"mainChatBlock\":\"Dialogs_mainChatBlock__1iniB\",\"chatTittle\":\"Dialogs_chatTittle__10pAG\",\"chatBody\":\"Dialogs_chatBody__QIwhv\",\"past__messages\":\"Dialogs_past__messages__2mXG7\"};","import React from \"react\";\r\nimport s from './FormsControls.module.css';\r\n\r\nexport const InputMessage = ({input, meta, ...props}) => {\r\n    let activeError = meta.touched && meta.error ? s.error : ' ';\r\n    return (\r\n        <div className={s.FormControl}>\r\n            <div className={activeError}>\r\n                <input {...input} {...props} /><br/>\r\n                {meta.touched && meta.error && <span>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport const InputAuth = ({input, meta, ...props}) => {\r\n    let activeError = meta.touched && meta.error ? s.error : ' ';\r\n    return (\r\n        <div className={s.FormControl}>\r\n            <div className={activeError}>\r\n                <input {...input} {...props} /><br/>\r\n                {meta.touched && meta.error && <span>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport const InputSearch = ({input, meta, ...props}) => {\r\n    let activeError = meta.touched && meta.error ? s.error : ' ';\r\n    return (\r\n        <div className={s.FormControl}>\r\n            <div className={activeError}>\r\n                <input {...input} {...props} /><br/>\r\n                {meta.touched && meta.error && <span>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {InputMessage} from \"../../assets/FormControl/FormsControls\";\r\nimport s from \"./Profile.module.css\";\r\n\r\nconst ProfileDataForm = (props) => {\r\n    return (\r\n        <div className={s.infoProfile}>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <button className='waves-effect waves-light btn-small indigo darken-4 mb10'>Save</button>\r\n                {props.error &&\r\n                    <div className={s.someError}>\r\n                        {props.error}\r\n                    </div>\r\n                }\r\n                <br/>\r\n                <span><b>About me:</b></span>\r\n                <Field placeholder='About me' name='aboutMe' component={InputMessage}/>\r\n                <span><b>Full name: </b></span>\r\n                <Field placeholder='Full Name' name='fullName' component={InputMessage}/>\r\n                <span><b>Seek work: </b></span>\r\n                <Field placeholder='Looking for a job' type=\"checkbox\" name='lookingForAJob' component={InputMessage}/>\r\n                <span><b>Description of the search: </b></span>\r\n                <Field placeholder='Looking for a job desc' name='lookingForAJobDescription' component={InputMessage}/>\r\n                {Object.keys(props.profile.contacts).map(key =>\r\n                    <Contact key={key} contactTitle={key} contactBody={''}/>\r\n                )}\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nconst Contact = ({contactTitle, contactBody}) => {\r\n    return (\r\n        <div>\r\n             <span>\r\n                <b>{contactTitle}: </b>\r\n                    <p>\r\n                        <a href={contactBody} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            {contactBody}\r\n                        </a>\r\n                    </p>\r\n            </span>\r\n            <Field placeholder={`https://www.${contactTitle}.com`}\r\n                   name={`contacts.${contactTitle}`} component={InputMessage}/>\r\n        </div>\r\n    )\r\n}\r\nconst ReduxEditProfile = reduxForm({form: 'editProfile'})(ProfileDataForm)\r\n\r\nexport default ReduxEditProfile;\r\n","import React, {useEffect, useState} from 'react';\r\n\r\nconst ProfileStatusWithHooks = React.memo(props => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatusUserThunk(props.id, status)\r\n    }\r\n    let onChangeTextStatus = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n    //сохранение значения поля статуса при переходах.\r\n    //вместо componentDidUpdate\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[props.status]);\r\n    //строка , [props.status], означает Перезапускать эффект только если props.status поменялся\r\n\r\n    const withEditStatus = () => {\r\n        //проверка страницы, если страница пользователя, то можно редактировать.\r\n        if (Number(props.urlMatchParams) === props.id) {\r\n            if (!editMode) {\r\n                return <span onDoubleClick={activateEditMode} data-tooltip=\"double click to change\">{!props.status ? <div>_____</div> : props.status}</span>\r\n            } else {\r\n                return <input onChange={onChangeTextStatus} autoFocus={true}\r\n                              onBlur={deactivateEditMode} value={status}/>\r\n            }\r\n        } else {\r\n            //просто вывод\r\n            return <div>\r\n                {!props.status ? <div>_____</div> : props.status}\r\n            </div>\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            {withEditStatus()}\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport default ProfileStatusWithHooks","import s from \"./Profile.module.css\";\r\nimport React from \"react\";\r\n\r\n\r\nconst ProfileData = (props) => {\r\n    return (\r\n        <div className={s.infoProfile}>\r\n            <div className={s.editButton}>\r\n                {props.id === Number(props.urlMatchParams) &&\r\n                    <p className='waves-effect waves-light btn-small indigo lighten-4 black-text mb10' onClick={() => {\r\n                        props.setEditProfile(true)\r\n                    }}>Edit\r\n                </p>\r\n                }\r\n            </div>\r\n            <hr />\r\n            <div className=\"row\">\r\n                <div className=\"col s6\">\r\n                    <b>About me: </b>\r\n                </div>\r\n                <div className=\"col s6 right-align\">\r\n                    <p>{props.profile.aboutMe}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col s6\">\r\n                    <b>Full name: </b>\r\n                </div>\r\n                <div className=\"col s6 right-align\">\r\n                    <p>{props.profile.fullName}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col s6\">\r\n                    <b>Status:</b>\r\n                </div>\r\n                <div className=\"col s6 right-align\">\r\n                    <p>{props.status}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col s6\">\r\n                    <b>Seek work: </b>\r\n                </div>\r\n                <div className=\"col s6 right-align\">\r\n                    <p>{props.profile.lookingForAJob ? 'yes' : 'no'}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col s6\">\r\n                    <b>Description of the search: </b>\r\n                </div>\r\n                <div className=\"col s6 right-align\">\r\n                    <p>{props.profile.lookingForAJobDescription}</p>\r\n                </div>\r\n            </div>\r\n            {Object.keys(props.profile.contacts).map(key =>\r\n                <Contact key={key} contactTitle={key} contactBody={props.profile.contacts[key]} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\nconst Contact = ({ contactTitle, contactBody }) => {\r\n    return (\r\n        <div>\r\n            {!!contactBody &&\r\n                <div className=\"row\">\r\n                    <div className=\"col s4\">\r\n                        <b>{contactTitle}: </b>\r\n                    </div>\r\n                    <div className=\"col s8 right-align\">\r\n                        <a href={contactBody} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                            {contactBody}\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ProfileData;","import React, { useState } from 'react';\r\nimport Preloader from \"../../assets/preloader/Preloader\";\r\nimport s from './Profile.module.css';\r\nimport ReduxEditProfile from \"./ProfileDataForm\";\r\n\r\nimport userPhoto from './../../assets/images/userPhoto.png'\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileData from \"./ProfileData\";\r\n\r\nconst Profile = React.memo(props => {\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n    let [editProfile, setEditProfile] = useState(false);\r\n    //update profile\r\n    const onSubmit = (formData) => {\r\n        if (formData === props.profile) {\r\n            setEditProfile(false)\r\n        } else {\r\n            props.updateProfileUserThunk(formData).then(() => {\r\n                setEditProfile(false)\r\n            })\r\n        }\r\n    }\r\n    //upload photo\r\n    let onUploadNewPhoto = (e) => {\r\n        if (e.target.files.length) {\r\n            props.uploadNewPhotoThunk(e.target.files[0])\r\n        }\r\n    }\r\n    return (\r\n        <div className={s.profileContain}>\r\n            {props.loading ? <Preloader /> :\r\n                <>\r\n                    <div className='row profile'>\r\n                        <div className=\"col\">\r\n                            <div className={s.avatarBlock}>\r\n                                <img src={!props.profile.photos.small ? userPhoto : props.profile.photos.large} alt='' />\r\n                                {props.id === Number(props.urlMatchParams) &&\r\n                                    // upload photo for myProfile\r\n                                    <div>\r\n                                        <input type=\"file\" name=\"myFile\" id=\"myFile\" onChange={onUploadNewPhoto} />\r\n                                        <label htmlFor=\"myFile\" className={s.uploadPhoto}\r\n                                            data-tooltip=\"click to upload a photo\"> </label>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col s6\">\r\n                            <h5>{props.profile.fullName}</h5>\r\n                            <ProfileStatusWithHooks status={props.status}\r\n                                updateStatusUserThunk={props.updateStatusUserThunk}\r\n                                id={props.id}\r\n                                urlMatchParams={props.urlMatchParams} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row profile\">\r\n                        <div className=\"col s12\">\r\n                            {editProfile ?\r\n                                <ReduxEditProfile initialValues={props.profile} onSubmit={onSubmit} profile={props.profile} />\r\n                                :\r\n                                <ProfileData profile={props.profile}\r\n                                    status={props.status}\r\n                                    updateStatusUserThunk={props.updateStatusUserThunk}\r\n                                    id={props.id}\r\n                                    urlMatchParams={props.urlMatchParams}\r\n                                    setEditProfile={setEditProfile}\r\n                                />\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Profile\r\n","import {ProfileAPI} from \"../Api/Api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst SET_NEW_PHOTO = 'SET_NEW_PHOTO'\r\nconst SET_SUCCESS_LOADING = 'SET_SUCCESS_LOADING'\r\n\r\nlet initialState = {\r\n    profile: null,\r\n    status: \"\",\r\n    loading: false\r\n}\r\n\r\nconst profilePageReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case SET_NEW_PHOTO:\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos:action.photos}\r\n            }\r\n        case SET_SUCCESS_LOADING:\r\n            return{\r\n                ...state,\r\n                loading: action.loading\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUserProfileAC = (profile) => {\r\n    return {\r\n        type: SET_USER_PROFILE, profile\r\n    }\r\n}\r\nexport const setStatusUserAC = (status) => {\r\n    return {\r\n        type: SET_STATUS, status\r\n    }\r\n}\r\nexport const uploadNewPhotoAC = (photos) => {\r\n    return {\r\n        type: SET_NEW_PHOTO, photos\r\n    }\r\n}\r\nexport const setLoadingAC = (loading) => {\r\n    return{\r\n        type: SET_SUCCESS_LOADING, loading\r\n    }\r\n}\r\nexport const getProfileThunkCreator = (userId) => {\r\n    return (dispatch) => {\r\n        if (!userId) {\r\n            //none\r\n        } else {\r\n            ProfileAPI.getProfile(userId)\r\n                .then(response => {\r\n                    dispatch(setUserProfileAC(response.data));\r\n                })\r\n        }\r\n    }\r\n}\r\n//получение статуса пользователя\r\nexport const setStatusUserThunkCreator = (userId) => {\r\n    return (dispatch) => {\r\n        if (!userId) {\r\n            //none\r\n        } else {\r\n            ProfileAPI.getStatus(userId).then(response => {\r\n                dispatch(setStatusUserAC(response.data))\r\n            })\r\n        }\r\n    }\r\n}\r\nexport const updateStatusUserThunkCreator = (userId, newStatus) => {\r\n    return (dispatch) => {\r\n        //проверка на изменение входящего текста\r\n        ProfileAPI.getStatus(userId).then(response => {\r\n            dispatch(setStatusUserAC(response.data))\r\n            if (!newStatus) {\r\n                alert('field empty')\r\n            } else {\r\n                if (response.data !== newStatus) {\r\n                    dispatch(setLoadingAC(true));\r\n                    ProfileAPI.updateStatus(newStatus).then(response => {\r\n                        if (response.data.resultCode === 0) {\r\n                            dispatch(setStatusUserAC(newStatus))\r\n                            dispatch(setLoadingAC(false));\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        })\r\n        //end\r\n    }\r\n}\r\nexport const updateProfileUserThunkCreator = (profile) => (dispatch, getState) => {\r\n    return ProfileAPI.updateProfile(profile).then(response => {\r\n        if (response.data.resultCode === 0) {\r\n            const userId = getState().Auth.id;\r\n            dispatch(getProfileThunkCreator(userId));\r\n        } else {\r\n            let messageError = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n            dispatch(stopSubmit(\"editProfile\", {_error: messageError}))\r\n            return Promise.reject(response.data.messages[0]);\r\n        }\r\n    })\r\n\r\n}\r\n\r\nexport const uploadNewPhotoThunkCreator = (photos) => async(dispatch) => {\r\n    dispatch(setLoadingAC(true));\r\n    let response =  await ProfileAPI.uploadPhoto(photos)\r\n    dispatch(setLoadingAC(false));\r\n    if(response.data.resultCode === 0){\r\n        dispatch(uploadNewPhotoAC(response.data.data.photos));\r\n    }\r\n}\r\n\r\nexport default profilePageReducer;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getProfileThunkCreator,\r\n    setStatusUserThunkCreator,\r\n    setUserProfileAC, updateProfileUserThunkCreator, updateStatusUserThunkCreator, uploadNewPhotoThunkCreator\r\n} from \"../../redux/ProfilePage-Reducer\";\r\nimport {Redirect, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n    updateProfile(userId) {\r\n        this.props.getProfileThunk(userId);\r\n        this.props.setStatusUserThunk(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        //Установка профиля пользователя\r\n        //проверяем из url пользователя по параметрам\r\n        let userId = this.props.match.params.userId;\r\n        this.updateProfile(userId);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        //обновление профилей при смене url\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.updateProfile(this.props.match.params.userId);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //добавление url\r\n        if (!this.props.match.params.userId) {\r\n            if (!this.props.id) {\r\n                return <Redirect to={'/login'}/>\r\n            } else {\r\n                let path = `/profile/${this.props.id}`;\r\n                return <Redirect to={path}/>\r\n            }\r\n        }\r\n        return (\r\n                <Profile profile={this.props.profile} status={this.props.status}\r\n                         updateStatusUserThunk={this.props.updateStatusUserThunk}\r\n                         id={this.props.id}\r\n                    //math params для изменения статуса\r\n                         urlMatchParams={this.props.match.params.userId}\r\n                         updateProfileUserThunk={this.props.updateProfileUserThunk}\r\n                         uploadNewPhotoThunk={this.props.uploadNewPhotoThunk}\r\n                         loading={this.props.loading}\r\n                />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        id: state.Auth.id,\r\n        status: state.profilePage.status,\r\n        loading: state.profilePage.loading\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,\r\n        {\r\n            setUser: setUserProfileAC,\r\n            getProfileThunk: getProfileThunkCreator,\r\n            setStatusUserThunk: setStatusUserThunkCreator,\r\n            updateStatusUserThunk: updateStatusUserThunkCreator,\r\n            updateProfileUserThunk: updateProfileUserThunkCreator,\r\n            uploadNewPhotoThunk: uploadNewPhotoThunkCreator\r\n        }),\r\n    //withAuthRedirectHoc,\r\n    withRouter\r\n)(ProfileContainer)\r\n","import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from './Sidebar.module.css';\r\n\r\nconst Sidebar = (props) => {\r\n    return (\r\n        <div className={s.sidebar}>\r\n            <ul>\r\n                {props.isAuth ?\r\n                    <>\r\n                        <li>\r\n                            <NavLink to='/profile/' activeClassName={s.active}> Profile </NavLink><br />\r\n                        </li>\r\n                        <li>\r\n                            <NavLink to='/Dialogs' activeClassName={s.active}> Dialogs </NavLink><br />\r\n                        </li>\r\n                        <li>\r\n                            <NavLink to='/Users' activeClassName={s.active}> Users </NavLink><br />\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={props.logoutThunk} className={s.loginButton}>\r\n                                Log out\r\n                        </button>\r\n                        </li>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <li>\r\n                            <NavLink to='/Dialogs' activeClassName={s.active}> Dialogs </NavLink><br />\r\n                        </li>\r\n                        <li>\r\n                            <NavLink to='/Users' activeClassName={s.active}> Users </NavLink><br />\r\n                        </li>\r\n                        <li>\r\n                            <button className={s.loginButton}>\r\n                                <NavLink to='/login/'>\r\n                                    Login\r\n                                </NavLink>\r\n                            </button>\r\n                        </li>\r\n                    </>\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;\r\n","import React from 'react';\r\nimport Sidebar from './../Sidebar/SIdebar';\r\n\r\nconst DropDownNavbar = (props) => {\r\n    let addClassForToggle = props.toggle ? ' active' : '';\r\n    return (\r\n        <div className=\"container blockDrop\">\r\n            <div className={'dropdownMenu' + addClassForToggle}>\r\n                <Sidebar logoutThunk={props.logoutThunk} isAuth={props.isAuth} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DropDownNavbar","import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport './../../App.css';\r\nimport s from './Header.module.css';\r\nimport userPhoto from './../../assets/images/userPhoto.png'\r\nimport DropDownNavbar from './DropDownNavbar';\r\n\r\n\r\nconst Header = (props) => {\r\n    let getUserPhoto = () => {\r\n        return !props.userPhoto ? <img src={userPhoto} alt='' className={s.userPhoto} /> :\r\n            <img src={props.userPhoto.small} alt='' className={s.userPhoto} /> || <img src={props.userPhoto.large} alt={''} className={s.userPhoto} />;\r\n    }\r\n    return (\r\n        <>\r\n            <nav className={'grey darken-4'}>\r\n                <div className=\"nav-wrapper\">\r\n                    <div className=\"container\">\r\n                        <NavLink to='/' className='logo'>Home</NavLink>\r\n                        <ul className={\"right \" + s.cursor} onClick={() => { props.dropDownToogle() }}>\r\n                            {props.isAuth ?\r\n                                <>\r\n                                    <li><h5>{props.login}</h5></li>\r\n                                    <p to='/profile' className={s.userlink}>\r\n                                        <li className='btn-floating btn-large waves-effect waves-light grey darken-4'>\r\n                                            {getUserPhoto()}\r\n                                        </li>\r\n                                    </p>\r\n                                    <li>\r\n                                        <i className=\"small material-icons\">expand_more</i>\r\n                                    </li>\r\n                                </>\r\n                                :\r\n                                <>\r\n                                    <li>\r\n                                        <i className=\"material-icons\">drag_handle</i>\r\n                                    </li>\r\n                                </>\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n          <DropDownNavbar logoutThunk={props.logoutThunk} toggle={props.toggle} isAuth={props.isAuth} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header;","import { meAPI, securityAPI } from \"../Api/Api\";\r\nimport { stopSubmit } from \"redux-form\";\r\n\r\nconst SET_AUTH_USER = 'SET_AUTH_USER';\r\nconst SET_SUCCESS_CAPTCHA = 'SET_SUCCESS_CAPTCHA';\r\nconst TOOGLE_LOADING = 'TOOGLE_LOADING';\r\n//длинная запись\r\n// type InitialStateType2 = {\r\n//     id: number | null\r\n//     login: string | null\r\n//     email: string | null\r\n//     isAuth: boolean \r\n//     captcha: string | null\r\n// }\r\ntype InitialStateType = typeof initialState;\r\nlet initialState = {\r\n    id: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null,\r\n    isAuth: false,\r\n    captcha: null as string | null,\r\n    loading: false\r\n}\r\n//коротая запись установки типа, автоматически\r\n//но указав as, даем понятие четкого типа\r\n\r\n\r\nconst authReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_AUTH_USER:\r\n        case SET_SUCCESS_CAPTCHA:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        case TOOGLE_LOADING: \r\n        return{\r\n            ...state,\r\n            loading: action.loading\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype DataSetAuthUserACType = {\r\n    id: number | null\r\n    login: string | null\r\n    email: string | null\r\n    isAuth: boolean\r\n}\r\ntype SetAuthUserACType = {\r\n    type: typeof SET_AUTH_USER,\r\n    data: DataSetAuthUserACType\r\n}\r\n\r\nexport const setAuthUserAC =\r\n    (id: number | null, login: string | null, email: string | null, isAuth: boolean): SetAuthUserACType => {\r\n        return {\r\n            type: SET_AUTH_USER,\r\n            data: { id, login, email, isAuth }\r\n        }\r\n    }\r\n\r\ntype SetSuccessCaptchaACType = {\r\n    type: typeof SET_SUCCESS_CAPTCHA,\r\n    data: {\r\n        captcha: string\r\n    }\r\n}\r\ntype ToogleLoadingACType = {\r\n    type: typeof TOOGLE_LOADING,\r\n    loading: boolean\r\n}\r\nexport const toogleLoadingAC = (loading: boolean): ToogleLoadingACType => {\r\n    return {\r\n        type: TOOGLE_LOADING,\r\n        loading\r\n    }\r\n}\r\nexport const setSuccessCaptchaAC = (captcha: string): SetSuccessCaptchaACType => {\r\n    return {\r\n        type: SET_SUCCESS_CAPTCHA,\r\n        data: { captcha }\r\n    }\r\n}\r\n\r\ntype AuthMeThunkCreatorType = {\r\n    response: {}\r\n    data: {\r\n        resultCode: number;\r\n        data: {\r\n            id: number;\r\n            login: string;\r\n            email: string\r\n        }\r\n    }\r\n}\r\nexport const authMeThunkCreator = () => (dispatch: any) => {\r\n    dispatch(toogleLoadingAC(true));\r\n    return meAPI.me().then((response: AuthMeThunkCreatorType) => {\r\n        if (response.data.resultCode === 0) {\r\n            let { id, login, email } = response.data.data;\r\n            dispatch(setAuthUserAC(id, login, email, true))\r\n            dispatch(toogleLoadingAC(false));\r\n        }else{\r\n            dispatch(toogleLoadingAC(false));\r\n        }\r\n    })\r\n}\r\ntype loginThunkCreatorType = {\r\n    response: {}\r\n    data: {\r\n        resultCode: number;\r\n        messages: string[]\r\n    }\r\n}\r\nexport const loginThunkCreator = (email: string, password: string, rememberMe: boolean, captcha: string) => (dispatch: any) => {\r\n    dispatch(toogleLoadingAC(true));\r\n    meAPI.login(email, password, rememberMe, captcha).then((response: loginThunkCreatorType) => {\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(authMeThunkCreator())\r\n            dispatch(toogleLoadingAC(false));\r\n        } else {\r\n            if (response.data.resultCode === 10) {\r\n                dispatch(getCaptchaThunkCreator());\r\n                dispatch(toogleLoadingAC(false));\r\n            }\r\n            let messageError = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n            dispatch(stopSubmit(\"login\", { _error: messageError }))\r\n            dispatch(toogleLoadingAC(false));\r\n        }\r\n    })\r\n}\r\ntype LogoutThunkCreatorType = {\r\n    response: {};\r\n    data: {\r\n        resultCode: number\r\n    }\r\n}\r\nexport const logoutThunkCreator = () => (dispatch: any) => {\r\n    dispatch(toogleLoadingAC(true));\r\n    meAPI.logout().then((response: LogoutThunkCreatorType) => {\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserAC(null, null, null, false))\r\n            dispatch(toogleLoadingAC(false));\r\n        }else{\r\n            dispatch(toogleLoadingAC(false));\r\n        }\r\n    })\r\n}\r\nexport const getCaptchaThunkCreator = () => async (dispatch: any) => {\r\n    dispatch(toogleLoadingAC(true));\r\n    let response = await securityAPI.getCaptcha();\r\n    dispatch(setSuccessCaptchaAC(response.data.url))\r\n    dispatch(toogleLoadingAC(false));\r\n}\r\n\r\nexport default authReducer;","import {authMeThunkCreator} from \"./Auth-Reducer\";\r\nimport {ProfileAPI} from \"../Api/Api\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\nconst INITIALIZED_USER_PHOTO = 'INITIALIZED_USER_PHOTO';\r\n\r\ntype IinitialStateType = {\r\n    initialized: boolean,\r\n    userPhoto: null\r\n}\r\nlet initialState:IinitialStateType = {\r\n    initialized: false,\r\n    userPhoto: null\r\n}\r\n\r\nexport const appReducer = (state = initialState, action: any):IinitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        case INITIALIZED_USER_PHOTO:\r\n            return{\r\n                ...state,\r\n                userPhoto: {...action.userPhoto}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype InitializedSuccessACType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\nexport const initializedSuccessAC = ():InitializedSuccessACType => {\r\n    return{\r\n        type: INITIALIZED_SUCCESS\r\n    }\r\n}\r\nexport const initializedUserPhotoAC = (userPhoto: any) => {\r\n    return{\r\n        type: INITIALIZED_USER_PHOTO,\r\n        userPhoto\r\n    }\r\n}\r\n\r\nexport const initiliazedThunkCreator = () => (dispatch: any) => {\r\n    let promise = dispatch(authMeThunkCreator());\r\n    promise.then(() => {\r\n        dispatch(initializedSuccessAC());\r\n    })\r\n}\r\nexport const initiliazedUserPhotoThunkCreator = (userId : any) => async(dispatch : any) => {\r\n    if(!userId){\r\n        //none\r\n    }else {\r\n        let promise = await ProfileAPI.getProfile(userId);\r\n        dispatch(initializedUserPhotoAC(promise.data.photos));\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport { connect } from \"react-redux\";\r\nimport { logoutThunkCreator } from \"../../redux/Auth-Reducer\";\r\nimport { initiliazedUserPhotoThunkCreator } from \"../../redux/App-Reducer\";\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\n\r\nclass HeaderContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { toggle: false };\r\n    }\r\n    dropDownToogle() {\r\n        this.setState({\r\n            toggle: !this.state.toggle\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initiliazedUserPhotoThunk(this.props.id);\r\n    }\r\n    //when changing accounts, the avatar does not change, correction\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.id !== this.props.id) {\r\n            if (this.props.id === null) {\r\n                //none\r\n            } else {\r\n                this.props.initiliazedUserPhotoThunk(this.props.id);\r\n            }\r\n        }\r\n        if (prevProps.location.pathname !== this.props.location.pathname) {\r\n            this.setState({\r\n                toggle: false\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props} userPhoto={this.props.userPhoto} dropDownToogle={this.dropDownToogle.bind(this)}\r\n                toggle={this.state.toggle}\r\n            />\r\n        )\r\n    }\r\n}\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.Auth.isAuth,\r\n        login: state.Auth.login,\r\n        id: state.Auth.id,\r\n        userPhoto: state.app.userPhoto\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        logoutThunk: logoutThunkCreator,\r\n        initiliazedUserPhotoThunk: initiliazedUserPhotoThunkCreator\r\n    }),\r\n    withRouter)(HeaderContainer);","import React from 'react';\r\nimport post2 from './../../assets/images/post2.jpg'\r\n\r\nconst Home = (props) => {\r\n    const postBackground = (img) => {\r\n        return {\r\n            backgroundImage: 'url(' + img + ')',\r\n            height: '35vh',\r\n            backgroundSize: 'cover',\r\n            backgroundRepeat: 'no-repeat',\r\n            width: '100%',\r\n            backgroundPosition: 'center'\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <div className=\"container post\">\r\n                <div className=\"row\">\r\n                    <div className=\"col s12 m12\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-image waves-effect waves-block waves-light activator\" style={postBackground(post2)}>\r\n                                <i className=\"material-icons small right white-text activator mr10\">more_horiz</i>\r\n                                <span className=\"card-title activator\">Update v2.0</span>\r\n                            </div>\r\n                            <div className=\"card-content\">\r\n                                <p>\r\n                                    In this update,\r\n                                    I changed the external part of the\r\n                                    application, refactored the code,\r\n                                    connected typescript and started\r\n                                    making small changes, at the moment\r\n                             there are not big bugs.<br />\r\n                                    <b>Changes</b>:\r\n                            </p>\r\n                                <ul>\r\n                                    <li>\r\n                                        Changed the design\r\n                                </li>\r\n                                    <li>\r\n                                        Syncing messages without reloading\r\n                                </li>\r\n                                    <li>\r\n                                        More secure routing\r\n                                </li>\r\n                                    <li>\r\n                                        Message counter(only with reload)\r\n                                </li>\r\n                                    <li>\r\n                                        Error output\r\n                                </li>\r\n                                </ul>\r\n                            </div>\r\n                            <div className=\"card-action\">\r\n                                <a href=\"https://github.com/sieugene/ReactLearning\" target='_blank' rel=\"noopener noreferrer\">\r\n                                    Repository link\r\n                                </a>\r\n                            </div>\r\n                            <div className=\"card-reveal\">\r\n                                <span className=\"card-title grey-text text-darken-4\">\r\n                                    Info\r\n                                    <i className=\"material-icons right\">close</i>\r\n                                </span>\r\n                                <h5>This is my first social network\r\n                                that I develop on react.<br/>\r\n                                This social network was created at the rate of \"it-incubator\"<br/>\r\n                                Using libraries: React and Redux (Thunk, Axios,redux-form).\r\n                                    </h5>\r\n                                <b>API: <a href=\"https://social-network.samuraijs.com/\" target='_blank' rel=\"noopener noreferrer\">\r\n                                    https://social-network.samuraijs.com/\r\n                                    </a>\r\n                                </b>\r\n                                <p>\r\n                                    At this point, the user can:\r\n                                </p>\r\n                                <ul>\r\n                                    <li>Log in(there is validation, captcha)</li>\r\n                                    <li>To change the profile information</li>\r\n                                    <li>Subscribe to other users</li>\r\n                                    <li>Write messages to users</li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home","\r\nexport const required = (value) => {\r\n    if(value) return undefined;\r\n    return 'Some errors';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if(value.length > maxLength) return 'Maximum number of characters ' + maxLength;\r\n    return undefined\r\n}\r\n","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { InputAuth } from \"../../assets/FormControl/FormsControls\";\r\nimport { required } from \"../utils/validators/validators\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport s from './../../assets/FormControl/FormsControls.module.css';\r\nimport Preloader from './../../assets/preloader/Preloader';\r\n\r\n//testing validate maxLength\r\n//let maxLength5 = maxLengthCreator(5);\r\n//create local form\r\nconst LoginForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder='Email' validate={[required]} name='email' component={InputAuth} />\r\n            </div>\r\n            <div>\r\n                <Field placeholder='Password' validate={[required]}\r\n                    name='password' type='Password' component={InputAuth} />\r\n            </div>\r\n            <div>\r\n                <p>\r\n                    <label>\r\n                        <Field name='rememberMe' component=\"input\" type=\"Checkbox\" />\r\n                        <span>Remember Me</span>\r\n                    </label>\r\n                </p>\r\n            </div>\r\n            {props.error && <div className={s.someError}>{props.error}</div>}\r\n            {props.captcha && <div><img src={props.captcha} alt={''} /></div>}\r\n            {props.captcha && <div><Field placeholder='enter symbols' name='captcha' component='input'\r\n                validate={[required]} /></div>}\r\n            <button className='waves-effect waves-light btn-small mr10'>Login</button>\r\n            <a href='https://social-network.samuraijs.com/'\r\n                target='_blank' className='waves-effect waves-light btn-small  deep-purple lighten-1' rel=\"noopener noreferrer\">\r\n                Go to API\r\n                </a>\r\n        </form>\r\n    )\r\n}\r\n//create redux-form\r\nconst ReduxLoginForm = reduxForm({ form: 'login' })(LoginForm)\r\nconst Login = (props) => {\r\n    let onSubmit = (formData) => {\r\n        //авторизация\r\n        props.loginThunk(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n    return (\r\n        <div>\r\n            {props.loading && <Preloader />}\r\n            <div className=\"authBlock\">\r\n                <h3>Login</h3>\r\n                <ReduxLoginForm onSubmit={onSubmit} captcha={props.captcha} />\r\n                <h3>Use to log in:</h3>\r\n                <ul>\r\n                    <li>\r\n                        <h5>\r\n                            Email: free@samuraijs.com\r\n                    </h5>\r\n                    </li>\r\n                    <li>\r\n                        <h5>\r\n                            Password: free\r\n                    </h5>\r\n                    </li>\r\n                </ul>\r\n                <h5>If authorization does not work, do it\r\n                <a href=\"https://social-network.samuraijs.com/login\" target=\"_blank\" rel=\"noopener noreferrer\"> here</a>\r\n                </h5>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import Login from \"./Login\";\r\nimport {connect} from \"react-redux\";\r\nimport { loginThunkCreator, getCaptchaThunkCreator } from \"../../redux/Auth-Reducer\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.Auth.isAuth,\r\n        captcha: state.Auth.captcha,\r\n        loading: state.Auth.loading\r\n    }\r\n}\r\n\r\nexport const LoginContainer = connect(mapStateToProps, {\r\n    loginThunk: loginThunkCreator,\r\n    getCaptchaThunk: getCaptchaThunkCreator\r\n})(Login)\r\n\r\n","import React from 'react';\r\nimport s from '../Sidebar/Sidebar.module.css';\r\n\r\nconst SecondSidebar = (props) => {\r\n    return(\r\n        <div className={s.sidebar}>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SecondSidebar;\r\n","import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport userPhoto from '../../assets/images/userPhoto.png'\r\n\r\nconst Dialog = (props) => {\r\n    let lastDataActivity = props.dialog.lastDialogActivityDate;\r\n    let lastDataActivShort = lastDataActivity.substr(0, lastDataActivity.length - 12)\r\n    return (\r\n        <div className='dialog'>\r\n            <NavLink to={`/messages/${props.dialog.id}`} className='black-text'>\r\n                <div className=\"row\">\r\n                    <div className=\"col xl1 l1 m2 s3\">\r\n                        <div>\r\n                            {!props.dialog.photos.small || !props.dialog.photos.large ?\r\n                                <img src={userPhoto} alt='' />\r\n                                :\r\n                                <img src={props.dialog.photos.small} alt='' /> || <img src={props.dialog.photos.large} alt='' />\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col xl11 l11 m10 s9\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col s6 left-align\">\r\n                                <h5>{props.dialog.userName}</h5>\r\n                            </div>\r\n                            <div className=\"col s6 right-align\">\r\n                                <p className='activity'>\r\n                                    {lastDataActivShort}<br />\r\n                                    {/* {props.dialog.lastUserActivityDate}<br /> */}\r\n                                </p>\r\n                                {props.dialog.newMessagesCount <= 0 ? '' :\r\n                                    <p className=\"newMessage\">\r\n                                        <span>\r\n                                            {props.dialog.newMessagesCount}\r\n                                        </span>\r\n                                    </p>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport Dialog from \"./Dialog\";\r\nimport Preloader from \"../../assets/preloader/Preloader\";\r\n\r\nconst Dialogs = (props) => {\r\n    if(props.loading){\r\n        return <Preloader/>\r\n    }\r\n    return(\r\n        <div>\r\n            <div>\r\n                    {props.listDialogs.length === 0 ? <div>No dialogs</div> :\r\n                        props.listDialogs.map(dialog => <Dialog dialog={dialog} key={dialog.id}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import { DialogsAPI, ProfileAPI } from \"../Api/Api\";\r\n\r\nconst SET_ALL_DIALOGS = 'SET_ALL_DIALOGS'\r\nconst SET_MESSAGES_WITH_FRIEND = 'SET_MESSAGES_WITH_FRIEND'\r\nconst SET_COUNT_NEW_MESSAGES = 'SET_COUNT_NEW_MESSAGES';\r\nconst SET_CURRENT_USER_IN_CHAT = 'SET_CURRENT_USER_IN_CHAT';\r\nconst SET_SUCCESS_LOADING = 'SET_SUCCESS_LOADING'\r\n\r\n\r\ntype InitialStateType = {\r\n    listDialogs: [];\r\n    messagesWithFriend: {\r\n        items: [],\r\n        totalCount: number | null\r\n    };\r\n    countNesMessages: number | null;\r\n    currentUserInChat: [];\r\n    loading: boolean;\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    listDialogs: [],\r\n    messagesWithFriend: {\r\n        items: [],\r\n        totalCount: null\r\n    },\r\n    countNesMessages: null,\r\n    currentUserInChat: [],\r\n    loading: false\r\n}\r\n\r\nconst DialogsReducer = (state = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case SET_ALL_DIALOGS:\r\n            return {\r\n                ...state,\r\n                ...state.listDialogs,\r\n                listDialogs: action.allDialogs\r\n            }\r\n        case SET_MESSAGES_WITH_FRIEND:\r\n            return {\r\n                ...state,\r\n                messagesWithFriend: {\r\n                    ...state.messagesWithFriend,\r\n                    items: action.messages,\r\n                    totalCount: action.totalCount\r\n                },\r\n\r\n            }\r\n        case SET_COUNT_NEW_MESSAGES:\r\n            return {\r\n                ...state,\r\n                countNesMessages: action.countNesMessages\r\n            }\r\n        case SET_CURRENT_USER_IN_CHAT:\r\n            return {\r\n                ...state,\r\n                currentUserInChat: action.profile\r\n            }\r\n        case SET_SUCCESS_LOADING: {\r\n            return {\r\n                ...state,\r\n                loading: action.loading\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype SetAllDialogsACType = {\r\n    type: typeof SET_ALL_DIALOGS\r\n    allDialogs: object\r\n}\r\nexport const setAllDialogsAC = (allDialogs: Object): SetAllDialogsACType => {\r\n    return {\r\n        type: SET_ALL_DIALOGS, allDialogs\r\n    }\r\n}\r\ntype SetCountNewMessagesType = {\r\n    type: typeof SET_COUNT_NEW_MESSAGES\r\n    countNesMessages: number\r\n}\r\nexport const setCountNewMessages = (countNesMessages: number): SetCountNewMessagesType => {\r\n    return {\r\n        type: SET_COUNT_NEW_MESSAGES, countNesMessages\r\n    }\r\n}\r\ntype SetCurrentUserInChatACType = {\r\n    type: typeof SET_CURRENT_USER_IN_CHAT\r\n    profile: object\r\n}\r\nexport const setCurrentUserInChatAC = (profile: object): SetCurrentUserInChatACType => {\r\n    return {\r\n        type: SET_CURRENT_USER_IN_CHAT, profile\r\n    }\r\n}\r\n\r\ntype SetMessagesListWithFriendACType = {\r\n    type: typeof SET_MESSAGES_WITH_FRIEND\r\n    messages: object\r\n    totalCount?: number | null\r\n}\r\nexport const setMessagesListWithFriendAC = (messages: object, totalCount?: number):\r\n    SetMessagesListWithFriendACType => {\r\n    return {\r\n        type: SET_MESSAGES_WITH_FRIEND, messages, totalCount\r\n    }\r\n}\r\ntype SetSuccessLoadingACType = {\r\n    type: typeof SET_SUCCESS_LOADING\r\n    loading: boolean\r\n}\r\nexport const setSuccessLoadingAC = (loading: boolean): SetSuccessLoadingACType => {\r\n    return {\r\n        type: SET_SUCCESS_LOADING, loading\r\n    }\r\n}\r\n\r\nexport const startChattingThunkCreator = (userId: number) => async (dispatch: any) => {\r\n    await DialogsAPI.startChatting(userId)\r\n    // console.log('startChatting')\r\n    // console.log(response)\r\n}\r\n\r\nexport const getAllDialogsThunkCreator = () => async (dispatch: any) => {\r\n    dispatch(setSuccessLoadingAC(true));\r\n    let response = await DialogsAPI.getAllDialogs()\r\n    dispatch(setSuccessLoadingAC(false));\r\n    // console.log('getAllDialogs')\r\n    dispatch(setAllDialogsAC(response.data));\r\n    // console.log(response.data)\r\n}\r\n\r\n\r\nexport const getListMessagesWithFriendThunkCreator = (userId: number) => async (dispatch: any) => {\r\n    let response = await DialogsAPI.getListMessagesWithFriend(userId)\r\n    dispatch(setMessagesListWithFriendAC(response.data.items, response.data.totalCount));\r\n    // console.log('getListMessagesWithFriend');\r\n    // console.log(response.data)\r\n    //set current user in chat\r\n    response = await ProfileAPI.getProfile(userId)\r\n    dispatch(setCurrentUserInChatAC(response.data))\r\n    Promise.all([response]).then(values => {\r\n        dispatch(setSuccessLoadingAC(false));\r\n    })\r\n}\r\nexport const syncMessagesWithFrinedThunkCreator = (userId: number) => (dispatch: any) => {\r\n    DialogsAPI.getListMessagesWithFriend(userId).then((response: any) => {\r\n        dispatch(setMessagesListWithFriendAC(response.data.items, response.data.totalCount));\r\n        // console.log('getListMessagesWithFriend');\r\n        // console.log(response.data)\r\n    })\r\n    console.log('sync: User:', userId);\r\n}\r\n\r\nexport const sendMessageToFriendThunkCreator = (userId: number, newMessage: string) => async (dispatch: any) => {\r\n    await DialogsAPI.sendMessageToFriend(userId, newMessage);\r\n    dispatch(getListMessagesWithFriendThunkCreator(userId));\r\n}\r\n\r\nexport const getListNewMessagesThunkCreator = (userId: number) => async (dispatch: any) => {\r\n    let response = await DialogsAPI.listNewMessage();\r\n    dispatch(setCountNewMessages(response.data))\r\n    // console.log('getListNewMessages');\r\n    // console.log(response.data)\r\n}\r\ntype ReponseGetReturnMessageDateThunkCreatorType = {\r\n    response: {}\r\n    data: {\r\n        items: any\r\n        totalCount: number | null\r\n    }\r\n}\r\nexport const getReturnMessageDateThunkCreator = (userId: number, date: string) => async (dispatch: any) => {\r\n    let response: ReponseGetReturnMessageDateThunkCreatorType = await DialogsAPI.returnMessageThanDate(userId, date);\r\n    dispatch(setMessagesListWithFriendAC(response.data));\r\n}\r\n\r\n\r\n\r\nexport default DialogsReducer;","import React, {useEffect} from 'react';\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getAllDialogsThunkCreator,\r\n    getListMessagesWithFriendThunkCreator,\r\n    getListNewMessagesThunkCreator,\r\n    sendMessageToFriendThunkCreator,\r\n    startChattingThunkCreator\r\n} from \"../../redux/Dialogs-Reducer\";\r\nimport {compose} from \"redux\";\r\nimport {Redirect, withRouter} from \"react-router-dom\";\r\n\r\n\r\nconst DialogsContainer = (props) => {\r\n    useEffect(()=>{\r\n        props.getAllDialogsThunk();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[])\r\n    if(!props.id){\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return(\r\n        <Dialogs {...props}/>\r\n    )\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        listDialogs: state.dialogs.listDialogs,\r\n        messagesWithFriend: state.dialogs.messagesWithFriend,\r\n        countNesMessages: state.dialogs.countNesMessages,\r\n        id: state.Auth.id,\r\n        loading: state.dialogs.loading\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps,{\r\n        startChattingThunk:startChattingThunkCreator,\r\n        getAllDialogsThunk: getAllDialogsThunkCreator,\r\n        getListMessagesWithFriendThunk: getListMessagesWithFriendThunkCreator,\r\n        sendMessageToFriendThunk: sendMessageToFriendThunkCreator,\r\n        getListNewMessagesThunk: getListNewMessagesThunkCreator\r\n    })\r\n)(DialogsContainer)\r\n","import React from 'react';\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport s from './MessagesForm.module.css'\r\n\r\nconst MessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.container}>\r\n            <div className=\"row p10\">\r\n                <div className=\"col xl11 m10 l10 s10\">\r\n                    <Field name='newMessage' placeholder='Write a message' component='textarea' className=\"materialize-textarea\" />\r\n                </div>\r\n                <div className=\"col xl1 m2 l2 s2 center-align\">\r\n                    <button className='btn-Medium transparent sendMessage pt25'>\r\n                        <i className=\"Medium material-icons black-text\">send</i>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ReduxMessageForm = reduxForm({ form: 'Message' })(MessageForm)\r\n\r\n","import React from 'react';\r\nimport s from \"./Dialogs.module.css\";\r\nimport { ReduxMessageForm } from \"./MessageForm\";\r\nimport userPhoto from './../../assets/images/userPhoto.png'\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Messages = (props) => {\r\n    let userId = props.match.params.userId;\r\n    let onTextInMessage = (formData) => {\r\n        props.sendMessageToFriendThunk(userId, formData.newMessage)\r\n    }\r\n\r\n    const regEx = /[^\\d:]/g;\r\n    const addedAt = (date) => {\r\n        let format = date.substr(date.length - 12)\r\n        let result = format.replace(regEx, '')\r\n        return result.split(':')[0] + ':' + result.split(':')[1];\r\n    }\r\n\r\n    //take current user photo\r\n    let getCurrentUserPhoto = props.currentUserInChat.length === 0 ? '' :\r\n        !props.currentUserInChat.photos.large || !props.currentUserInChat.photos.small ?\r\n            <img src={userPhoto} alt={''} /> : <img src={props.currentUserInChat.photos.large} alt={''} />;\r\n    //take auth profile photo\r\n    let getUserPhoto = !props.authUserPhoto ? ' ' :\r\n        <img src={props.authUserPhoto.small} alt={''} /> || <img src={props.authUserPhoto.large} alt={''} />\r\n    return (\r\n        <div className=\"message__main container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s12\">\r\n                    <div className={s.messagesContain}>\r\n                        {props.currentUserInChat.length === 0 ? '' :\r\n                            <div className={s.chatTittle}>\r\n                                <h3 className='left-align'>\r\n                                    <NavLink to='/Dialogs'>\r\n                                        Back\r\n                                    </NavLink>\r\n                                </h3>\r\n                                <h3 className='center-align'>{props.currentUserInChat.fullName}</h3>\r\n                                <NavLink to={'/profile/' + userId}>\r\n                                    {getCurrentUserPhoto}\r\n                                </NavLink>\r\n                            </div>\r\n                        }\r\n                        <div className={s.mainChatBlock}>\r\n                            <div className={s.chatBody}>\r\n                                {props.messagesWithFriend.items.length >= 10 &&\r\n                                    <button className={s.past__messages} onClick={() => {\r\n                                        props.getReturnMessageDateThunk(props.currentUserInChat.userId, '2020.01.01')\r\n                                    }}>\r\n                                        Past messages\r\n                                    </button>\r\n                                }\r\n                                {props.messagesWithFriend.items.length === 0 ? 'You don\\'t have messages with this user' :\r\n                                    props.messagesWithFriend.items.map(m => <div key={m.id} className={m.viewed === true ?\r\n                                        s.messagesWithFriendId : s.notViewedMessage}>\r\n                                        <div className={s.main__img__username}>\r\n                                            {m.senderId === userId ?\r\n                                                getCurrentUserPhoto\r\n                                                :\r\n                                                getUserPhoto\r\n                                            }\r\n                                            <h4>{m.senderName}</h4>\r\n                                            <div className={s.dateAdded}>{addedAt(m.addedAt)}</div>\r\n                                        </div>\r\n                                        {/*<div>Id: {m.id}</div>*/}\r\n                                        {/*check read message*/}\r\n                                        {/*<div>SenderId: {m.senderId}</div>*/}\r\n                                        {/*<div>recipientId: {m.recipientId}</div>*/}\r\n                                        <div className={s.chatText}>{m.body}</div>\r\n                                    </div>)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <ReduxMessageForm onSubmit={onTextInMessage} />\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messages;","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    getListMessagesWithFriendThunkCreator, getReturnMessageDateThunkCreator, sendMessageToFriendThunkCreator,\r\n    syncMessagesWithFrinedThunkCreator\r\n} from \"../../redux/Dialogs-Reducer\";\r\nimport { compose } from \"redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Messages from \"./Messages\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nclass MessagesContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { load: false };\r\n    }\r\n    componentDidMount() {\r\n        this.props.getListMessagesWithFriendThunk(this.props.match.params.userId);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        this.props.ClearIntreval();\r\n        if (prevProps.match.params.userId !== this.props.match.params.userId) {\r\n            this.props.getListMessagesWithFriendThunk(this.props.match.params.userId);\r\n            this.props.ClearIntreval();\r\n        } else if (prevProps.match.params.userId === this.props.match.params.userId) {\r\n            this.props.SyncInterval(this.props.match.params.userId);\r\n        }\r\n    }\r\n    render() {\r\n        if(!this.props.id){\r\n            return <Redirect to={'/login'}/>\r\n        }\r\n        return (\r\n            <Messages {...this.props} />\r\n        )\r\n    }\r\n}\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messagesWithFriend: state.dialogs.messagesWithFriend,\r\n        listDialogs: state.dialogs.listDialogs,\r\n        currentUserInChat: state.dialogs.currentUserInChat,\r\n        authUserPhoto: state.app.userPhoto,\r\n        id: state.Auth.id\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {\r\n        getListMessagesWithFriendThunk: getListMessagesWithFriendThunkCreator,\r\n        sendMessageToFriendThunk: sendMessageToFriendThunkCreator,\r\n        getReturnMessageDateThunk: getReturnMessageDateThunkCreator,\r\n        syncMessagesWithFrinedThunk: syncMessagesWithFrinedThunkCreator\r\n    })\r\n)(MessagesContainer)\r\n","import React from 'react';\r\nimport s from './GlobalErrors.module.css'\r\n\r\nclass GlobalErrors extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { globalErrors: null };\r\n    }\r\n    catchAllUnhandelErrors = (promiseRejectionEvent) => {\r\n        // alert(promiseRejectionEvent.reason.message);\r\n        //console.log(promiseRejectionEvent)\r\n        this.setState({\r\n            globalErrors: promiseRejectionEvent.reason.message +\r\n                '(' + promiseRejectionEvent.reason.request.response + ')'\r\n        })\r\n        setTimeout(() =>\r\n            this.setState({\r\n                globalErrors: null\r\n            })\r\n            , 5000)\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandelErrors)\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.globalErrors ?\r\n                    <div className={s.error_window}>\r\n                        {this.state.globalErrors}\r\n                    </div>\r\n                    :\r\n                    ''\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GlobalErrors","import React, { Suspense } from 'react';\r\nimport './App.css';\r\nimport { Route } from \"react-router\";\r\nimport ProfileContainer from \"./Components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./Components/Header/HeaderContainer\";\r\nimport Home from './Components/Home/Home';\r\nimport { LoginContainer } from \"./Components/Login/LoginContainer\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { initiliazedThunkCreator } from \"./redux/App-Reducer\";\r\nimport Preloader from \"./assets/preloader/Preloader\";\r\nimport SecondSidebar from \"./Components/SecondSidebar/SecondSidebar\";\r\nimport DialogsContainer from \"./Components/Dialogs/DialogsContainer\";\r\nimport MessagesContainer from './Components/Dialogs/MessagesContainer';\r\nimport GlobalErrors from './Components/GlobalErrors/GlobalErrors';\r\nimport { syncMessagesWithFrinedThunkCreator } from './redux/Dialogs-Reducer';\r\nimport { Redirect } from \"react-router-dom\"\r\n//import UsersContainer from \"./Components/Users/UsersContainer\";\r\nconst UsersContainer = React.lazy(() => import('./Components/Users/UsersContainer'));\r\n\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.props.initiliazedThunk();\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.location.pathname !== this.props.location.pathname) {\r\n            this.ClearIntreval();\r\n        }\r\n    }\r\n    //sync message\r\n    SyncInterval(userIdi) {\r\n        this.timerID = setInterval(() =>\r\n            this.props.syncMessagesWithFrinedThunk(userIdi), 5000);\r\n    }\r\n    ClearIntreval() { return clearInterval(this.timerID) };\r\n    //end\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader />\r\n        }\r\n        return (\r\n            <div className=\"App\">\r\n                <GlobalErrors />\r\n                <HeaderContainer />\r\n                <Route exact path='/' render={() => (<Home/>)}/>\r\n                <div className='container'>\r\n                    <div className='row'>\r\n                        <div className='col s12'>\r\n                            <Route\r\n                                path='/Users'\r\n                                render={() => {\r\n                                    return <Suspense fallback={<Preloader />}>\r\n                                        <UsersContainer />\r\n                                    </Suspense>\r\n                                }\r\n                                } />\r\n                            <Route exact path='/profile/:userId?' render={() => <ProfileContainer />} />\r\n                            <Route path='/Login' render={() => <LoginContainer />} />\r\n                            <Route path='/Dialogs' render={() => this.props.id ? <DialogsContainer /> : <Redirect to='/Login' />} />\r\n                            <SecondSidebar />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"container-fluid fluidToMobile\">\r\n                    <Route path='/messages/:userId?' render={() => this.props.id ?\r\n                        <MessagesContainer SyncInterval={this.SyncInterval.bind(this)}\r\n                            ClearIntreval={this.ClearIntreval.bind(this)}\r\n                        /> : <Redirect to='/Login' />} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    initialized: state.app.initialized,\r\n    id: state.Auth.id\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        initiliazedThunk: initiliazedThunkCreator,\r\n        syncMessagesWithFrinedThunk: syncMessagesWithFrinedThunkCreator\r\n\r\n    }),\r\n    withRouter\r\n)(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport UsersPageReducer from \"./UsersPage-Reducer\";\r\nimport profilePageReducer from \"./ProfilePage-Reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport DialogsReducer from \"./Dialogs-Reducer\";\r\nimport { appReducer } from \"./App-Reducer\";\r\nimport authReducer from \"./Auth-Reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    userPage: UsersPageReducer,\r\n    profilePage: profilePageReducer,\r\n    Auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n    dialogs: DialogsReducer\r\n})\r\n\r\n//extension\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers,composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n// let store = createStore(reducers,applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from \"./redux/store-redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport 'materialize-css';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <HashRouter basename={process.env.PUBLIC_URL}>\r\n        <Provider\r\n            store={store} >\r\n            <App />\r\n        </Provider>\r\n    </HashRouter>\r\n    , document.getElementById('root')\r\n);\r\n\r\n//Убрали наш render() так как connect решает эту проблему сам\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport preloadImg from './preloader.svg'\r\nimport s from './preloader.module.css';\r\n\r\nlet Preloader = (props) => {\r\n    return (\r\n        <div className={s.preloadContain}>\r\n            <img src={preloadImg} className={s.preloader} alt=''/>\r\n        </div>\r\n    )\r\n}\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"uploadPhoto\":\"Profile_uploadPhoto__cSgFt\",\"infoProfile\":\"Profile_infoProfile__3r0mc\",\"avatarBlock\":\"Profile_avatarBlock__9ZEi-\",\"editButton\":\"Profile_editButton__3_Uta\",\"saveButton\":\"Profile_saveButton__140UJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FormControl\":\"FormsControls_FormControl__2qXua\",\"error\":\"FormsControls_error__1vYY8\",\"someError\":\"FormsControls_someError__2WXnf\"};","module.exports = __webpack_public_path__ + \"static/media/userPhoto.a8d8ecba.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginButton\":\"Header_loginButton__22GjW\",\"cursor\":\"Header_cursor__VdsFJ\",\"userPhoto\":\"Header_userPhoto__3UOb7\",\"userlink\":\"Header_userlink__34Tsc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"preloader_preloader__v54Zr\",\"preloadContain\":\"preloader_preloadContain__2re8h\"};","import * as axios from \"axios\";\r\n//создаем образец, чтобы не дублировать код\r\nlet instance = axios.create({\r\n        withCredentials: true,\r\n        baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n        headers: {\r\n            \"API-KEY\": \"a6c20467-1a5b-406b-88d2-a8a4879b1b99\"\r\n        }\r\n    })\r\n    //группировка методов\r\nexport const UsersAPI = {\r\n    getUsers(pageSize, pageNumber) {\r\n        return instance.get(`users?count=${pageSize}&page=${pageNumber}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getUsersTerm(pageSize, text) {\r\n        return instance.get(`users?count=${pageSize}&page=1&term=${text}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}\r\n\r\nexport const ProfileAPI = {\r\n    getProfile(userId) {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId) {\r\n        return instance.get(`/profile/status/` + userId);\r\n    },\r\n    updateStatus(newStatus) {\r\n        return instance.put(`/profile/status`, { status: newStatus })\r\n    },\r\n    updateProfile(profile) {\r\n        return instance.put(`/profile`, profile)\r\n    },\r\n    uploadPhoto(photos) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photos);\r\n        return instance.put(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const FollowAPI = {\r\n    followUser(id) {\r\n        return instance.post(`follow/${id}`, {})\r\n    },\r\n    unfollowUser(id) {\r\n        return instance.delete(`follow/${id}`, {})\r\n    }\r\n}\r\n\r\nexport const meAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email, password, rememberMe = false, captcha = null) {\r\n        return instance.post(`auth/login`, { email, password, rememberMe, captcha })\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return instance.get(`security/get-captcha-url`)\r\n    }\r\n}\r\n\r\nexport const DialogsAPI = {\r\n    startChatting(userId) {\r\n        return instance.put(`dialogs/${userId}`)\r\n    },\r\n    getAllDialogs() {\r\n        return instance.get(`dialogs`)\r\n    },\r\n    getListMessagesWithFriend(userId) {\r\n        return instance.get(`dialogs/${userId}/messages`)\r\n    },\r\n    sendMessageToFriend(userId, newMessage) {\r\n        return instance.post(`dialogs/${userId}/messages`, { body: newMessage })\r\n    },\r\n    isViewedYourMessage(messageId) {\r\n        return instance.get(`dialogs/messages/${messageId}/viewed`)\r\n    },\r\n    messageInSpam(messageId) {\r\n        return instance.post(`dialogs/messages/${messageId}/spam`)\r\n    },\r\n    deleteMessage(messageId) {\r\n        return instance.delete(`dialogs/messages/${messageId}`)\r\n    },\r\n    restoreMessage(messageId) {\r\n        return instance.put(`dialogs/messages/${messageId}/restore`)\r\n    },\r\n    returnMessageThanDate(userId, date) {\r\n        return instance.get(`dialogs/${userId}/messages/new?newerThen=${date}`)\r\n    },\r\n    listNewMessage() {\r\n        return instance.get(`dialogs/messages/new/count`)\r\n    }\r\n}"],"sourceRoot":""}